{"ast":null,"code":"// We pass in our existing cartItems array and also the\n// cartItemToAdd, because we want to compare their ID\n// to decide whether to increase the quantity if they are\n// the same item, or to add it to cart if it is a new item\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  // We do the comparison here and set it to the value\n  // of existingCartItem.\n  // We use the find() method, which returns the first\n  // item found in the array that matches the condition\n  // the we define within it\n  const existingCartItem = cartItems.find( // This is a function to compare the two\n  // values - the existing items' IDs and the\n  // new item's ID. If it finds a match, it sets\n  // the value of the const to that. If not,\n  // it returns undefined\n  cartItem => cartItem.id === cartItemToAdd.id); // If our existingCartItem exists, we map over the\n  // items. We use map, as it returns a new array,\n  // which is what we need to ensure that React knows\n  // to re-render the component\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => // We do the same and compare the two values\n    cartItem.id === cartItemToAdd.id // If there is a match, we spread in the\n    // object containing the cartItem and\n    // increase the quantity by 1\n    ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } // If they don't match, we return the cartItem\n    // as it is\n    : cartItem);\n  } // If the existingCartItem doesn't exist, we want\n  // to return a new array with the cartItems, and\n  // also an object containing the cartItemToAd\n  // and set its quantity to 1 - this enables the\n  // quantity to be incremented\n\n\n  return [...cartItems, { ...cartItemToAdd,\n    quantity: 1\n  }];\n};\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // If the existingCartItem's quantity is less than 1,\n  // we want to filter it out and return the other items\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => // If the cartItem.id matches the\n    // cartItemToRemove.id, we want to\n    // filter it out and only return the ones\n    // that don't match\n    cartItem.id !== cartItemToRemove.id);\n  } // If the quantity is more than 1, we want to map\n  // over the cartItems, compare the cartItem.id to\n  // the cartItemToRemove.id, and if it matches, we\n  // spread in the cart item in a new object, but\n  // decrease the quantity. If the IDs don't match,\n  // we just return our existing cart item. This\n  // ensures that only the matching ID it decreased\n  // and all others remain the same\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};","map":{"version":3,"sources":["/workspace/crwn-clothing/client/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","filter"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACvD;AACA;AACA;AACA;AACA;AACA,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,EACrB;AACA;AACA;AACA;AACA;AACAC,EAAAA,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EANrB,CAAzB,CANuD,CAevD;AACA;AACA;AACA;;AACA,MAAGH,gBAAH,EAAqB;AACjB,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IACzB;AACAA,IAAAA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,CACI;AACA;AACA;AAHJ,MAIM,EAAC,GAAGD,QAAJ;AAAcG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA5C,KAJN,CAKI;AACA;AANJ,MAOMH,QATH,CAAP;AAWH,GA/BsD,CAgCvD;AACA;AACA;AACA;AACA;;;AACA,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAC,GAAGC,aAAJ;AAAmBM,IAAAA,QAAQ,EAAE;AAA7B,GAAf,CAAP;AACH,CAtCM;AAwCP,OAAO,MAAMC,kBAAkB,GAAG,CAACR,SAAD,EAAYS,gBAAZ,KAAiC;AAC/D,QAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACrBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EADxB,CAAzB,CAD+D,CAK/D;AACA;;AACA,MAAIH,gBAAgB,CAACK,QAAjB,KAA8B,CAAlC,EAAqC;AACjC,WAAOP,SAAS,CAACU,MAAV,CAAiBN,QAAQ,IAC5B;AACA;AACA;AACA;AACAA,IAAAA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAL9B,CAAP;AAOH,GAf8D,CAiB/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAOL,SAAS,CAACM,GAAV,CAAcF,QAAQ,IACzBA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,GACA,EAAE,GAAGD,QAAL;AAAeG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,GADA,GAGAH,QAJG,CAAP;AAMH,CA/BM","sourcesContent":["// We pass in our existing cartItems array and also the\n// cartItemToAdd, because we want to compare their ID\n// to decide whether to increase the quantity if they are\n// the same item, or to add it to cart if it is a new item\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n    // We do the comparison here and set it to the value\n    // of existingCartItem.\n    // We use the find() method, which returns the first\n    // item found in the array that matches the condition\n    // the we define within it\n    const existingCartItem = cartItems.find(\n        // This is a function to compare the two\n        // values - the existing items' IDs and the\n        // new item's ID. If it finds a match, it sets\n        // the value of the const to that. If not,\n        // it returns undefined\n        cartItem => cartItem.id === cartItemToAdd.id\n    );\n    \n    // If our existingCartItem exists, we map over the\n    // items. We use map, as it returns a new array,\n    // which is what we need to ensure that React knows\n    // to re-render the component\n    if(existingCartItem) {\n        return cartItems.map(cartItem =>\n            // We do the same and compare the two values\n            cartItem.id === cartItemToAdd.id\n                // If there is a match, we spread in the\n                // object containing the cartItem and\n                // increase the quantity by 1\n                ? {...cartItem, quantity: cartItem.quantity + 1}\n                // If they don't match, we return the cartItem\n                // as it is\n                : cartItem\n        )\n    }\n    // If the existingCartItem doesn't exist, we want\n    // to return a new array with the cartItems, and\n    // also an object containing the cartItemToAd\n    // and set its quantity to 1 - this enables the\n    // quantity to be incremented\n    return [...cartItems, {...cartItemToAdd, quantity: 1}]\n};\n\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n    const existingCartItem = cartItems.find(\n        cartItem => cartItem.id === cartItemToRemove.id\n    );\n    \n    // If the existingCartItem's quantity is less than 1,\n    // we want to filter it out and return the other items\n    if (existingCartItem.quantity === 1) {\n        return cartItems.filter(cartItem =>\n            // If the cartItem.id matches the\n            // cartItemToRemove.id, we want to\n            // filter it out and only return the ones\n            // that don't match\n            cartItem.id !== cartItemToRemove.id\n        )\n    }\n\n    // If the quantity is more than 1, we want to map\n    // over the cartItems, compare the cartItem.id to\n    // the cartItemToRemove.id, and if it matches, we\n    // spread in the cart item in a new object, but\n    // decrease the quantity. If the IDs don't match,\n    // we just return our existing cart item. This\n    // ensures that only the matching ID it decreased\n    // and all others remain the same\n    return cartItems.map(cartItem =>\n        cartItem.id === cartItemToRemove.id ?\n        { ...cartItem, quantity: cartItem.quantity - 1 }\n        :\n        cartItem\n    );\n};\n"]},"metadata":{},"sourceType":"module"}