{"ast":null,"code":"var _jsxFileName = \"/workspace/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React from 'react'; // Import Route to enable advanced routing\n\nimport { Route } from 'react-router-dom'; // Import connect to enable passing in mapDispatchToProps\n\nimport { connect } from 'react-redux'; // Import fetchCollectionsStart action to allow passing snapshot to props\n\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions'; // Import CollectionsOverviewContainer\n\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container'; // Import CollectionPageContainer\n\nimport CollectionPageContainer from '../collection/collection.container'; // This needs to be a class based component, as we want\n// to pull the shop data from firebase and store it as\n// the component's state.\n// As the ShopPage is rendered with the route in App.js,\n// match is one of its props that ShopPage will have access\n// to. match holds the path that is being rendered, so if\n// we destructure it from our props, then pass match.path\n// into the Route path as a string inerpolated expression,\n// it will ensure the /shop route (exact match) takes us to\n// the CollectionOverview component.\n// In the second route, we pass `${match.path}/:collectionId`\n// into the path. This gets the match.path, which is /shop\n// and adds the string value of the relevant collectionId\n// to the url (hats, jackets, etc.) and then renders the\n// CollectionPage component\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    // We need to destructure fetchCollectionsStart\n    // from our props\n    const {\n      fetchCollectionsStart\n    } = this.props; // We then call it the moment our component mounts,\n    // which then pulls in the data from the reducer\n\n    fetchCollectionsStart();\n  }\n\n  render() {\n    // We destructure the match from our props\n    const {\n      match\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      component: CollectionsOverviewContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      component: CollectionPageContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  }\n\n}\n\n; // The mapDispatchToProps uses a dispatch function which\n// dispatched the fetchCollectionStartAsync method\n// as the fetchCollectionStartAsync value \n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/workspace/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","fetchCollectionsStart","CollectionsOverviewContainer","CollectionPageContainer","ShopPage","Component","componentDidMount","props","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,SAASC,qBAAT,QAAsC,+BAAtC,C,CAEA;;AACA,OAAOC,4BAAP,MAAyC,sEAAzC,C,CACA;;AACA,OAAOC,uBAAP,MAAoC,oCAApC,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AACnCC,EAAAA,iBAAiB,GAAG;AAChB;AACA;AACA,UAAM;AAAEL,MAAAA;AAAF,QAA4B,KAAKM,KAAvC,CAHgB,CAIhB;AACA;;AACAN,IAAAA,qBAAqB;AACxB;;AAEDO,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKF,KAAvB;AAEA,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,EAAI,GAAEE,KAAK,CAACC,IAAK,EAFzB;AAGI,MAAA,SAAS,EAAGR,4BAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAMI,oBAAC,KAAD;AACI,MAAA,IAAI,EAAI,GAAEO,KAAK,CAACC,IAAK,gBADzB;AAEI,MAAA,SAAS,EAAGP,uBAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AAaH;;AA3BkC;;AA4BtC,C,CAED;AACA;AACA;;AACA,MAAMQ,kBAAkB,GAAGC,QAAQ,KAAK;AACpCX,EAAAA,qBAAqB,EAAE,MACnBW,QAAQ,CAACX,qBAAqB,EAAtB;AAFwB,CAAL,CAAnC;;AAKA,eAAeD,OAAO,CAClB,IADkB,EAElBW,kBAFkB,CAAP,CAGbP,QAHa,CAAf","sourcesContent":["import React from 'react';\n// Import Route to enable advanced routing\nimport { Route } from 'react-router-dom';\n// Import connect to enable passing in mapDispatchToProps\nimport { connect } from 'react-redux';\n\n// Import fetchCollectionsStart action to allow passing snapshot to props\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions';\n\n// Import CollectionsOverviewContainer\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\n// Import CollectionPageContainer\nimport CollectionPageContainer from '../collection/collection.container';\n\n\n// This needs to be a class based component, as we want\n// to pull the shop data from firebase and store it as\n// the component's state.\n// As the ShopPage is rendered with the route in App.js,\n// match is one of its props that ShopPage will have access\n// to. match holds the path that is being rendered, so if\n// we destructure it from our props, then pass match.path\n// into the Route path as a string inerpolated expression,\n// it will ensure the /shop route (exact match) takes us to\n// the CollectionOverview component.\n// In the second route, we pass `${match.path}/:collectionId`\n// into the path. This gets the match.path, which is /shop\n// and adds the string value of the relevant collectionId\n// to the url (hats, jackets, etc.) and then renders the\n// CollectionPage component\nclass ShopPage extends React.Component {\n    componentDidMount() {\n        // We need to destructure fetchCollectionsStart\n        // from our props\n        const { fetchCollectionsStart } = this.props;\n        // We then call it the moment our component mounts,\n        // which then pulls in the data from the reducer\n        fetchCollectionsStart();\n    };\n\n    render() {\n        // We destructure the match from our props\n        const { match } = this.props;\n\n        return (\n            <div className='shop-page'>\n                <Route\n                    exact\n                    path={ `${match.path}` }\n                    component={ CollectionsOverviewContainer }\n                />\n                <Route\n                    path={ `${match.path}/:collectionId` }\n                    component={ CollectionPageContainer }\n                />\n            </div>\n        )\n    }\n};\n\n// The mapDispatchToProps uses a dispatch function which\n// dispatched the fetchCollectionStartAsync method\n// as the fetchCollectionStartAsync value \nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStart: () =>\n        dispatch(fetchCollectionsStart())\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}