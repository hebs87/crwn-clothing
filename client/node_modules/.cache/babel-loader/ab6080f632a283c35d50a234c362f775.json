{"ast":null,"code":"var _jsxFileName = \"/workspace/crwn-clothing/src/components/sign-in/sign-in.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux'; // Import FormInput\n\nimport FormInput from '../form-input/form-input.component'; // Import CustomButton\n\nimport CustomButton from '../custom-button/custom-button.component'; // Import our actions to enable the sagas\n\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions'; // Import styled components\n\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from './sign-in.styles';\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // We need to destructure the emailSignInStart from props\n\n      const {\n        emailSignInStart\n      } = this.props; // We need to destructure our email and password from\n      // the state, so that we can use the auth's\n      // signInWithEmailAndPassword method to varify the\n      // details. If they are correct, we sign the user in\n\n      const {\n        email,\n        password\n      } = this.state;\n    };\n\n    this.handleChange = event => {\n      const {\n        value,\n        name\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: ''\n    };\n  } // We want full control over what the submit will do,\n  // so we use preventDefault to stop this and specify\n  // what needs to be done\n  // We then pass this in to the form onSubmit attribute\n\n\n  render() {\n    // We need to destructure googleSignInStart from the props\n    const {\n      googleSignInStart\n    } = this.props;\n    return React.createElement(SignInContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(SignInTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"I already have an account\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(FormInput, {\n      name: \"email\",\n      type: \"email\",\n      value: this.state.email,\n      handleChange: this.handleChange,\n      label: \"Email\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      name: \"password\",\n      type: \"password\",\n      value: this.state.password,\n      handleChange: this.handleChange,\n      label: \"Password\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(ButtonsBarContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Sign In\"), React.createElement(CustomButton, {\n      type: \"button\",\n      onClick: googleSignInStart,\n      isGoogleSignIn: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Sign In With Google\"))));\n  }\n\n}\n\n;\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  // In the function, we get back the email and password,\n  // which we pass into our emailSignInStart action as an\n  // object where the keys go to the values\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/workspace/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignInContainer","SignInTitle","ButtonsBarContainer","SignIn","Component","constructor","props","handleSubmit","event","preventDefault","email","password","state","handleChange","value","name","target","setState","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n// Import FormInput\nimport FormInput from '../form-input/form-input.component'\n// Import CustomButton\nimport CustomButton from '../custom-button/custom-button.component'\n// Import our actions to enable the sagas\nimport {\n    googleSignInStart,\n    emailSignInStart\n} from '../../redux/user/user.actions';\n// Import styled components\nimport {\n    SignInContainer,\n    SignInTitle,\n    ButtonsBarContainer\n} from './sign-in.styles';\n\n\nclass SignIn extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: '',\n            password: ''\n        }\n    }\n\n    // We want full control over what the submit will do,\n    // so we use preventDefault to stop this and specify\n    // what needs to be done\n    // We then pass this in to the form onSubmit attribute\n    handleSubmit = async event => {\n        event.preventDefault();\n        // We need to destructure the emailSignInStart from props\n        const { emailSignInStart } = this.props;\n        // We need to destructure our email and password from\n        // the state, so that we can use the auth's\n        // signInWithEmailAndPassword method to varify the\n        // details. If they are correct, we sign the user in\n        const { email, password } = this.state;\n\n\n    };\n\n    // When there is a change to the form fields, we want\n    // to pull the input field's name and value - the target\n    // is the input field itself\n    // We will then dynamically set the state to the relevant\n    // data, so the name will be that of the input field and\n    // the value will be its value\n    handleChange = event => {\n        const { value, name } = event.target;\n\n        this.setState({ [name]: value })\n    }\n\n    render() {\n        // We need to destructure googleSignInStart from the props\n        const { googleSignInStart } = this.props;\n\n        return(\n            <SignInContainer>\n                <SignInTitle>I already have an account</SignInTitle>\n                <span>Sign in with your email and password</span>\n\n                <form onSubmit={this.handleSubmit}>\n                    <FormInput\n                        name=\"email\"\n                        type=\"email\"\n                        value={this.state.email}\n                        handleChange={this.handleChange}\n                        label=\"Email\"\n                        required\n                    />\n                    <FormInput\n                        name=\"password\"\n                        type=\"password\"\n                        value={this.state.password}\n                        handleChange={this.handleChange}\n                        label=\"Password\"\n                        required\n                    />\n\n                    <ButtonsBarContainer>\n                        <CustomButton\n                            type='submit'\n                        >Sign In\n                        </CustomButton>\n                        <CustomButton\n                            type='button'\n                            onClick={ googleSignInStart }\n                            isGoogleSignIn\n                        >\n                            Sign In With Google\n                        </CustomButton>\n                    </ButtonsBarContainer>\n                </form>\n            </SignInContainer>\n        );\n    }\n};\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    // In the function, we get back the email and password,\n    // which we pass into our emailSignInStart action as an\n    // object where the keys go to the values\n    emailSignInStart: (email, password) =>\n        dispatch(emailSignInStart({ email, password }))\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(SignIn);\n"]},"metadata":{},"sourceType":"module"}