{"ast":null,"code":"var _jsxFileName = \"/workspace/crwn-clothing/src/components/cart-dropdown/cart-dropdown.component.jsx\";\nimport React from 'react'; // Import connect to enable mapStateToProps\n\nimport { connect } from 'react-redux'; // Import createStructured selector to allow multiple selector calls\n\nimport { createStructuredSelector } from 'reselect'; // Import withRouter to enable button to route to CheckoutPage\n\nimport { withRouter } from 'react-router-dom'; // Import CartItem\n\nimport CartItem from '../cart-item/cart-item.component'; // Import selectCartItems selector to pass in to mapStateToProps\n\nimport { selectCartItems } from '../../redux/cart/cart.selectors'; // Import toggleCartHidden action to enable toggling the cart to hide\n// when clicking the GO TO CHECKOUT BUTTON\n\nimport { toggleCartHidden } from '../../redux/cart/cart.actions'; // Import styled components\n\nimport { CartDropdownContainer, CartItemsContainer, EmptyMessageContainer, CartDropdownButton } from './cart-dropdown.styles'; // We destructure our cartIems so we can pass\n// it into our CartItem component\n// We pass in history to enable routing to checkout page\n// We pass in dispatch to enable passsing the toggle\n// CartDropdown feature to the Button\n\nconst CartDropdown = ({\n  cartItems,\n  history,\n  dispatch\n}) => React.createElement(CartDropdownContainer, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}, React.createElement(CartItemsContainer, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}, // We need an if statement here so we\n// conditionally render an 'empty' message\n// if there are no cart items, or we render\n// the cart items if there are any\ncartItems.length ? // We map out our cartItems\ncartItems.map(cartItem => React.createElement(CartItem, {\n  key: cartItem.id,\n  item: cartItem,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n})) : // We display a message if cart is empty\nReact.createElement(EmptyMessageContainer, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}, \"Your cart is empty\")), React.createElement(CartDropdownButton, {\n  onClick: () => {\n    // Route to the checkout route\n    history.push('/checkout'); // Dispatch the toggleCartHidden action to\n    // toggle the cart to hidden\n\n    dispatch(toggleCartHidden());\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n}, \"GO TO CHECKOUT\")); // We create a mapStateToProps function to pull\n// the cartItems. We pass in the whole state\n// and the selector then gets the relevant part\n\n\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems\n});\nexport default withRouter(connect(mapStateToProps)(CartDropdown));","map":{"version":3,"sources":["/workspace/crwn-clothing/src/components/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","connect","createStructuredSelector","withRouter","CartItem","selectCartItems","toggleCartHidden","CartDropdownContainer","CartItemsContainer","EmptyMessageContainer","CartDropdownButton","CartDropdown","cartItems","history","dispatch","length","map","cartItem","id","push","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,wBAAT,QAAyC,UAAzC,C,CACA;;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CACA;;AACA,OAAOC,QAAP,MAAqB,kCAArB,C,CACA;;AACA,SAASC,eAAT,QAAgC,iCAAhC,C,CACA;AACA;;AACA,SAASC,gBAAT,QAAiC,+BAAjC,C,CACA;;AACA,SACIC,qBADJ,EAEIC,kBAFJ,EAGIC,qBAHJ,EAIIC,kBAJJ,QAKO,wBALP,C,CAOA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,CAAD,KACjB,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEQ;AACA;AACA;AACA;AACAF,SAAS,CAACG,MAAV,GACI;AACAH,SAAS,CAACI,GAAV,CAAcC,QAAQ,IAClB,oBAAC,QAAD;AAAU,EAAA,GAAG,EAAGA,QAAQ,CAACC,EAAzB;AAA8B,EAAA,IAAI,EAAGD,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CAFJ,GAMI;AACA,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAbZ,CADJ,EAoBI,oBAAC,kBAAD;AACI,EAAA,OAAO,EAAE,MAAM;AACX;AACAJ,IAAAA,OAAO,CAACM,IAAR,CAAa,WAAb,EAFW,CAGX;AACA;;AACAL,IAAAA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;AACH,GAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBApBJ,CADJ,C,CAmCA;AACA;AACA;;;AACA,MAAMc,eAAe,GAAGlB,wBAAwB,CAAC;AAC7CU,EAAAA,SAAS,EAAEP;AADkC,CAAD,CAAhD;AAIA,eAAeF,UAAU,CAACF,OAAO,CAACmB,eAAD,CAAP,CAAyBT,YAAzB,CAAD,CAAzB","sourcesContent":["import React from 'react';\n// Import connect to enable mapStateToProps\nimport { connect } from 'react-redux';\n// Import createStructured selector to allow multiple selector calls\nimport { createStructuredSelector } from 'reselect';\n// Import withRouter to enable button to route to CheckoutPage\nimport { withRouter } from 'react-router-dom';\n// Import CartItem\nimport CartItem from '../cart-item/cart-item.component';\n// Import selectCartItems selector to pass in to mapStateToProps\nimport { selectCartItems } from '../../redux/cart/cart.selectors';\n// Import toggleCartHidden action to enable toggling the cart to hide\n// when clicking the GO TO CHECKOUT BUTTON\nimport { toggleCartHidden } from '../../redux/cart/cart.actions'\n// Import styled components\nimport {\n    CartDropdownContainer,\n    CartItemsContainer,\n    EmptyMessageContainer,\n    CartDropdownButton\n} from './cart-dropdown.styles';\n\n// We destructure our cartIems so we can pass\n// it into our CartItem component\n// We pass in history to enable routing to checkout page\n// We pass in dispatch to enable passsing the toggle\n// CartDropdown feature to the Button\nconst CartDropdown = ({ cartItems, history, dispatch }) => (\n    <CartDropdownContainer>\n        <CartItemsContainer>\n            {\n                // We need an if statement here so we\n                // conditionally render an 'empty' message\n                // if there are no cart items, or we render\n                // the cart items if there are any\n                cartItems.length ? (\n                    // We map out our cartItems\n                    cartItems.map(cartItem =>\n                        <CartItem key={ cartItem.id } item={ cartItem } />\n                    )\n                ) : (\n                    // We display a message if cart is empty\n                    <EmptyMessageContainer>\n                        Your cart is empty\n                    </EmptyMessageContainer>\n                )\n            }\n        </CartItemsContainer>\n        <CartDropdownButton\n            onClick={() => {\n                // Route to the checkout route\n                history.push('/checkout');\n                // Dispatch the toggleCartHidden action to\n                // toggle the cart to hidden\n                dispatch(toggleCartHidden());\n            }}\n        >\n            GO TO CHECKOUT\n        </CartDropdownButton>\n    </CartDropdownContainer>\n);\n\n// We create a mapStateToProps function to pull\n// the cartItems. We pass in the whole state\n// and the selector then gets the relevant part\nconst mapStateToProps = createStructuredSelector({\n    cartItems: selectCartItems\n});\n\nexport default withRouter(connect(mapStateToProps)(CartDropdown));\n"]},"metadata":{},"sourceType":"module"}