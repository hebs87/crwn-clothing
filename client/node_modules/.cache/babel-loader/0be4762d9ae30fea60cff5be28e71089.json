{"ast":null,"code":"var _jsxFileName = \"/workspace/crwn-clothing/client/src/components/checkout-item/checkout-item.component.jsx\";\nimport React from 'react'; // Import connect to bind action to component\n\nimport { connect } from 'react-redux'; // Import clearItemFromCart, addItem, removeItem actions to allow adding/removing/clearing items from cart\n\nimport { clearItemFromCart, addItem, removeItem } from '../../redux/cart/cart.actions'; // Import styled components\n\nimport { CheckoutItemContainer, ImageContainer, TextContainer, QuantityContainer, RemoveButtonContainer } from './checkout-item.styles'; // We pass in the cartItem prop from the CheckoutPage component\n// We need to do the explicit return in the function\n// and then destructure our props in the function so that\n// we still have access to the whole cartItem, which will\n// let us pass it into the remove button to clear the item\n// We also pass in our clearItem function which we created\n// in the mapDispatchToProps function\n// The addItem prop allows us to call the function to add an item\n// The removeItem prop allows us to call the function to remove\n// or clear the item, depending on its quantity\n\nconst CheckoutItem = ({\n  cartItem,\n  clearItem,\n  addItem,\n  removeItem\n}) => {\n  // Destructure the relevant props from the cartItem\n  // so we can pass it into the relevant sections\n  const {\n    name,\n    imageUrl,\n    price,\n    quantity\n  } = cartItem;\n  return React.createElement(CheckoutItemContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(ImageContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: imageUrl,\n    alt: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })), React.createElement(TextContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, name), React.createElement(QuantityContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: () => removeItem(cartItem),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"\\u276E\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, quantity), React.createElement(\"div\", {\n    onClick: () => addItem(cartItem),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"\\u276F\")), React.createElement(TextContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"\\xA3\", price), React.createElement(RemoveButtonContainer, {\n    onClick: () => clearItem(cartItem),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"\\u2715\"));\n}; // This allows us to pass in the item to the\n// actions and dispatch them to our reducer\n// to add/remove/clear an item from the cart\n\n\nconst mapDispatchToProps = dispatch => ({\n  clearItem: item => dispatch(clearItemFromCart(item)),\n  addItem: item => dispatch(addItem(item)),\n  removeItem: item => dispatch(removeItem(item))\n});\n\nexport default connect(null, mapDispatchToProps)(CheckoutItem);","map":{"version":3,"sources":["/workspace/crwn-clothing/client/src/components/checkout-item/checkout-item.component.jsx"],"names":["React","connect","clearItemFromCart","addItem","removeItem","CheckoutItemContainer","ImageContainer","TextContainer","QuantityContainer","RemoveButtonContainer","CheckoutItem","cartItem","clearItem","name","imageUrl","price","quantity","mapDispatchToProps","dispatch","item"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,iBAAT,EAA4BC,OAA5B,EAAqCC,UAArC,QAAuD,+BAAvD,C,CACA;;AACA,SACIC,qBADJ,EAEIC,cAFJ,EAGIC,aAHJ,EAIIC,iBAJJ,EAKIC,qBALJ,QAMO,wBANP,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,SAAZ;AAAuBT,EAAAA,OAAvB;AAAgCC,EAAAA;AAAhC,CAAD,KAAkD;AACnE;AACA;AACA,QAAM;AAAES,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,KAAlB;AAAyBC,IAAAA;AAAzB,MAAsCL,QAA5C;AACA,SACI,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,GAAG,EAAGG,QAAX;AAAsB,IAAA,GAAG,EAAGD,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBA,IAAjB,CAJJ,EAKI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,OAAO,EAAE,MAAMT,UAAU,CAACO,QAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQK,QAAR,CAJJ,EAKI;AAAK,IAAA,OAAO,EAAE,MAAMb,OAAO,CAACQ,QAAD,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,CALJ,EAcI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwBI,KAAxB,CAdJ,EAeI,oBAAC,qBAAD;AAAuB,IAAA,OAAO,EAAE,MAAMH,SAAS,CAACD,QAAD,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfJ,CADJ;AAqBH,CAzBD,C,CA2BA;AACA;AACA;;;AACA,MAAMM,kBAAkB,GAAGC,QAAQ,KAAK;AACpCN,EAAAA,SAAS,EAAEO,IAAI,IAAID,QAAQ,CAAChB,iBAAiB,CAACiB,IAAD,CAAlB,CADS;AAEpChB,EAAAA,OAAO,EAAEgB,IAAI,IAAID,QAAQ,CAACf,OAAO,CAACgB,IAAD,CAAR,CAFW;AAGpCf,EAAAA,UAAU,EAAEe,IAAI,IAAID,QAAQ,CAACd,UAAU,CAACe,IAAD,CAAX;AAHQ,CAAL,CAAnC;;AAMA,eAAelB,OAAO,CAClB,IADkB,EAElBgB,kBAFkB,CAAP,CAGbP,YAHa,CAAf","sourcesContent":["import React from 'react';\n// Import connect to bind action to component\nimport { connect } from 'react-redux';\n// Import clearItemFromCart, addItem, removeItem actions to allow adding/removing/clearing items from cart\nimport { clearItemFromCart, addItem, removeItem } from '../../redux/cart/cart.actions';\n// Import styled components\nimport {\n    CheckoutItemContainer,\n    ImageContainer,\n    TextContainer,\n    QuantityContainer,\n    RemoveButtonContainer\n} from './checkout-item.styles';\n\n// We pass in the cartItem prop from the CheckoutPage component\n// We need to do the explicit return in the function\n// and then destructure our props in the function so that\n// we still have access to the whole cartItem, which will\n// let us pass it into the remove button to clear the item\n// We also pass in our clearItem function which we created\n// in the mapDispatchToProps function\n// The addItem prop allows us to call the function to add an item\n// The removeItem prop allows us to call the function to remove\n// or clear the item, depending on its quantity\nconst CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) => {\n    // Destructure the relevant props from the cartItem\n    // so we can pass it into the relevant sections\n    const { name, imageUrl, price, quantity } = cartItem;\n    return (\n        <CheckoutItemContainer>\n            <ImageContainer>\n                <img src={ imageUrl } alt={ name } />\n            </ImageContainer>\n            <TextContainer>{ name }</TextContainer>\n            <QuantityContainer>\n                <div onClick={() => removeItem(cartItem)}>\n                    &#10094;\n                </div>\n                <span>{ quantity }</span>\n                <div onClick={() => addItem(cartItem)}>\n                    &#10095;\n                </div>\n            </QuantityContainer>\n            <TextContainer>&pound;{ price }</TextContainer>\n            <RemoveButtonContainer onClick={() => clearItem(cartItem)}>\n                &#10005;\n            </RemoveButtonContainer>\n        </CheckoutItemContainer>\n    );\n};\n\n// This allows us to pass in the item to the\n// actions and dispatch them to our reducer\n// to add/remove/clear an item from the cart\nconst mapDispatchToProps = dispatch => ({\n    clearItem: item => dispatch(clearItemFromCart(item)),\n    addItem: item => dispatch(addItem(item)),\n    removeItem: item => dispatch(removeItem(item))\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(CheckoutItem);\n"]},"metadata":{},"sourceType":"module"}