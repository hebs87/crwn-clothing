{"ast":null,"code":"var _jsxFileName = \"/workspace/crwn-clothing/src/App.js\";\nimport React, { useEffect } from 'react'; // Import Switch and Route to enable routing\n\nimport { Switch, Route, Redirect } from 'react-router-dom'; // Import connect to enable the app to access redux\n\nimport { connect } from 'react-redux'; // Import createStructured selector to allow multiple selector calls\n\nimport { createStructuredSelector } from 'reselect';\nimport './App.css'; // Import HomePage Component\n\nimport HomePage from './pages/homepage/homepage.component'; // Import ShopPage Component\n\nimport ShopPage from './pages/shop/shop.component'; // Import SignInAndSignUp Component\n\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component'; // Import CheckoutPage component\n\nimport CheckoutPage from './pages/checkout/checkout.component'; // Import Header Component\n\nimport Header from './components/header/header.component'; // Import auth from firebase utiils\n// Import selectors to pass into mapStateToProps\n\nimport { selectCurrentUser } from './redux/user/user.selectors'; // import checkUserSession for user persistence (passed into dispatch)\n\nimport { checkUserSession } from './redux/user/user.actions';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    // Destructure the checkUserSession from mapDispatchToProps\n    const {\n      checkUserSession\n    } = this.props; // Instantiate checkUserSession to listen to user state\n\n    checkUserSession();\n  } // We close the session when the component unmounts\n\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/checkout\",\n      component: CheckoutPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => this.props.currentUser ? React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }) : React.createElement(SignInAndSignUp, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })));\n  }\n\n} // FOR REDIRECTING THE USER TO HOME PAGE IF SIGNED IN\n// We want to get our redux user state\n\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n}); // This dispatches our checkUserSession action - passed\n// into componenentDidMount to enable user persistance\n\nconst mapDispatchToProps = dispatch => ({\n  checkUserSession: () => dispatch(checkUserSession())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/workspace/crwn-clothing/src/App.js"],"names":["React","useEffect","Switch","Route","Redirect","connect","createStructuredSelector","HomePage","ShopPage","SignInAndSignUp","CheckoutPage","Header","selectCurrentUser","checkUserSession","App","Component","unsubscribeFromAuth","componentDidMount","props","componentWillUnmount","render","currentUser","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,OAAO,WAAP,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,qCAArB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,6BAArB,C,CACA;;AACA,OAAOC,eAAP,MAA4B,2DAA5B,C,CACA;;AACA,OAAOC,YAAP,MAAyB,qCAAzB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,sCAAnB,C,CACA;AACA;;AACA,SAASC,iBAAT,QAAkC,6BAAlC,C,CACA;;AACA,SAASC,gBAAT,QAAiC,2BAAjC;;AAEA,MAAMC,GAAN,SAAkBd,KAAK,CAACe,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAG9BC,mBAH8B,GAGR,IAHQ;AAAA;;AAK9BC,EAAAA,iBAAiB,GAAG;AAChB;AACA,UAAM;AAAEJ,MAAAA;AAAF,QAAuB,KAAKK,KAAlC,CAFgB,CAGhB;;AACAL,IAAAA,gBAAgB;AACnB,GAV6B,CAY9B;;;AACAM,EAAAA,oBAAoB,GAAG;AACnB,SAAKH,mBAAL;AACH;;AAEDI,EAAAA,MAAM,GAAI;AACN,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAGb,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAGC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,WAAlB;AAA8B,MAAA,SAAS,EAAGE,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,EAAC,SAFT;AAGI,MAAA,MAAM,EAAE,MACJ,KAAKQ,KAAL,CAAWG,WAAX,GACC,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,GAGC,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAFJ,CADJ;AAoBH;;AAtC6B,C,CAyClC;AACA;;;AACA,MAAMC,eAAe,GAAGhB,wBAAwB,CAAC;AAC7Ce,EAAAA,WAAW,EAAET;AADgC,CAAD,CAAhD,C,CAIA;AACA;;AACA,MAAMW,kBAAkB,GAAGC,QAAQ,KAAK;AACpCX,EAAAA,gBAAgB,EAAE,MAAMW,QAAQ,CAACX,gBAAgB,EAAjB;AADI,CAAL,CAAnC;;AAIA,eAAeR,OAAO,CAClBiB,eADkB,EAElBC,kBAFkB,CAAP,CAGbT,GAHa,CAAf","sourcesContent":["import React, { useEffect } from 'react';\n// Import Switch and Route to enable routing\nimport { Switch, Route, Redirect } from 'react-router-dom';\n// Import connect to enable the app to access redux\nimport { connect } from 'react-redux';\n// Import createStructured selector to allow multiple selector calls\nimport { createStructuredSelector } from 'reselect';\n\nimport './App.css';\n\n// Import HomePage Component\nimport HomePage from './pages/homepage/homepage.component';\n// Import ShopPage Component\nimport ShopPage from './pages/shop/shop.component'\n// Import SignInAndSignUp Component\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component'\n// Import CheckoutPage component\nimport CheckoutPage from './pages/checkout/checkout.component';\n\n// Import Header Component\nimport Header from './components/header/header.component'\n// Import auth from firebase utiils\n// Import selectors to pass into mapStateToProps\nimport { selectCurrentUser } from './redux/user/user.selectors';\n// import checkUserSession for user persistence (passed into dispatch)\nimport { checkUserSession } from './redux/user/user.actions';\n\nclass App extends React.Component {\n    // We set the initial unsibscribeFromAuth value to null\n    // to enable us to close the session when we unmount\n    unsubscribeFromAuth = null;\n\n    componentDidMount() {\n        // Destructure the checkUserSession from mapDispatchToProps\n        const { checkUserSession } = this.props;\n        // Instantiate checkUserSession to listen to user state\n        checkUserSession();\n    }\n\n    // We close the session when the component unmounts\n    componentWillUnmount() {\n        this.unsubscribeFromAuth();\n    }\n    \n    render () {\n        return (\n            <div>\n                <Header />\n                <Switch>\n                    <Route exact path='/' component={ HomePage } />\n                    <Route path='/shop' component={ ShopPage } />\n                    <Route exact path='/checkout' component={ CheckoutPage } />\n                    <Route\n                        exact\n                        path='/signin'\n                        render={() => \n                            this.props.currentUser ?\n                            (<Redirect to='/' />)\n                            :\n                            (<SignInAndSignUp />)\n                        }\n                    />\n                </Switch>\n            </div>\n        );\n    }\n}\n\n// FOR REDIRECTING THE USER TO HOME PAGE IF SIGNED IN\n// We want to get our redux user state\nconst mapStateToProps = createStructuredSelector({\n    currentUser: selectCurrentUser\n});\n\n// This dispatches our checkUserSession action - passed\n// into componenentDidMount to enable user persistance\nconst mapDispatchToProps = dispatch => ({\n    checkUserSession: () => dispatch(checkUserSession())\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n"]},"metadata":{},"sourceType":"module"}