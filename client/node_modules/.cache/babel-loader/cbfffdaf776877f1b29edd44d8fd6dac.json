{"ast":null,"code":"var _jsxFileName = \"/workspace/crwn-clothing/src/components/sign-in/sign-in.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux'; // Import FormInput\n\nimport FormInput from '../form-input/form-input.component'; // Import CustomButton\n\nimport CustomButton from '../custom-button/custom-button.component'; // Import signInWithGoogle\n\nimport { auth, signInWithGoogle } from '../../firebase/firebase.utils'; // Import our action\n\nimport { googleSignInStart } from '../../redux/user/user.actions'; // Import styled components\n\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from './sign-in.styles';\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // We need to destructure our email and password from\n      // the state, so that we can use the auth's\n      // signInWithEmailAndPassword method to varify the\n      // details. If they are correct, we sign the user in\n\n      const {\n        email,\n        password\n      } = this.state;\n\n      try {\n        // Sign the user in if successful and then clear state\n        await auth.signInWithEmailAndPassword(email, password);\n        this.setState({\n          email: '',\n          password: ''\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.handleChange = event => {\n      const {\n        value,\n        name\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: ''\n    };\n  } // We want full control over what the submit will do,\n  // so we use preventDefault to stop this and specify\n  // what needs to be done\n  // We then pass this in to the form onSubmit attribute\n\n\n  render() {\n    // We need to destructure googleSignInStart from the props\n    const {\n      googleSignInStart\n    } = this.props;\n    return React.createElement(SignInContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(SignInTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"I already have an account\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(FormInput, {\n      name: \"email\",\n      type: \"email\",\n      value: this.state.email,\n      handleChange: this.handleChange,\n      label: \"Email\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      name: \"password\",\n      type: \"password\",\n      value: this.state.password,\n      handleChange: this.handleChange,\n      label: \"Password\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(ButtonsBarContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Sign In\"), React.createElement(CustomButton, {\n      onClick: signInWithGoogle,\n      isGoogleSignIn: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Sign In With Google\"))));\n  }\n\n}\n\n;\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart())\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/workspace/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","connect","FormInput","CustomButton","auth","signInWithGoogle","googleSignInStart","SignInContainer","SignInTitle","ButtonsBarContainer","SignIn","Component","constructor","props","handleSubmit","event","preventDefault","email","password","state","signInWithEmailAndPassword","setState","error","console","log","handleChange","value","name","target","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n// Import FormInput\nimport FormInput from '../form-input/form-input.component'\n// Import CustomButton\nimport CustomButton from '../custom-button/custom-button.component'\n// Import signInWithGoogle\nimport { auth, signInWithGoogle } from '../../firebase/firebase.utils';\n// Import our action\nimport { googleSignInStart } from '../../redux/user/user.actions';\n// Import styled components\nimport {\n    SignInContainer,\n    SignInTitle,\n    ButtonsBarContainer\n} from './sign-in.styles';\n\n\nclass SignIn extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: '',\n            password: ''\n        }\n    }\n\n    // We want full control over what the submit will do,\n    // so we use preventDefault to stop this and specify\n    // what needs to be done\n    // We then pass this in to the form onSubmit attribute\n    handleSubmit = async event => {\n        event.preventDefault();\n\n        // We need to destructure our email and password from\n        // the state, so that we can use the auth's\n        // signInWithEmailAndPassword method to varify the\n        // details. If they are correct, we sign the user in\n        const { email, password } = this.state;\n\n        try {\n            // Sign the user in if successful and then clear state\n            await auth.signInWithEmailAndPassword(email, password);\n            this.setState({ email: '', password: '' });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    // When there is a change to the form fields, we want\n    // to pull the input field's name and value - the target\n    // is the input field itself\n    // We will then dynamically set the state to the relevant\n    // data, so the name will be that of the input field and\n    // the value will be its value\n    handleChange = event => {\n        const { value, name } = event.target;\n\n        this.setState({ [name]: value })\n    }\n\n    render() {\n        // We need to destructure googleSignInStart from the props\n        const { googleSignInStart } = this.props;\n\n        return(\n            <SignInContainer>\n                <SignInTitle>I already have an account</SignInTitle>\n                <span>Sign in with your email and password</span>\n\n                <form onSubmit={this.handleSubmit}>\n                    <FormInput\n                        name=\"email\"\n                        type=\"email\"\n                        value={this.state.email}\n                        handleChange={this.handleChange}\n                        label=\"Email\"\n                        required\n                    />\n                    <FormInput\n                        name=\"password\"\n                        type=\"password\"\n                        value={this.state.password}\n                        handleChange={this.handleChange}\n                        label=\"Password\"\n                        required\n                    />\n\n                    <ButtonsBarContainer>\n                        <CustomButton type='submit'>Sign In</CustomButton>\n                        <CustomButton onClick={ signInWithGoogle } isGoogleSignIn >\n                            Sign In With Google\n                        </CustomButton>\n                    </ButtonsBarContainer>\n                </form>\n            </SignInContainer>\n        );\n    }\n};\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart())\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(SignIn);\n"]},"metadata":{},"sourceType":"module"}