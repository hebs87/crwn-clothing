{"ast":null,"code":"var _jsxFileName = \"/workspace/crwn-clothing/client/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux'; // Import FormInput\n\nimport FormInput from '../form-input/form-input.component'; // Import CustomButton\n\nimport CustomButton from '../custom-button/custom-button.component'; // Import our actions to enable the sagas\n\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions'; // Import styled components\n\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from './sign-in.styles'; // Now that we are using Hooks, we can convert this component\n// to a functional component, instead of a class component\n// We need to destructure emailSignInStart & googleSignInStart\n// to enable passing them in to the inner component\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  // We are using Hooks, so we no longer need a\n  // constructor method to set the state. Instead,\n  // we use the useState() Hook and we pass in the\n  // object containing the email and password\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  }); // We need to destructure our email and password from\n  // userCredentials, so that we can use the auth's\n  // signInWithEmailAndPassword method to varify the\n  // details. If they are correct, we sign the user in\n\n  const {\n    email,\n    password\n  } = userCredentials; // We want full control over what the submit will do,\n  // so we use preventDefault to stop this and specify\n  // what needs to be done\n  // We then pass this in to the form onSubmit attribute\n  // As we are using Hooks to set the state, we need to\n  // make this its own function\n\n  const handleSubmit = async event => {\n    event.preventDefault(); // Then we call our emailSignInStart and pass in our\n    // email and password\n\n    emailSignInStart(email, password);\n  }; // When there is a change to the form fields, we want\n  // to pull the input field's name and value - the target\n  // is the input field itself\n  // We will then dynamically set the state to the relevant\n  // data, so the name will be that of the input field and\n  // the value will be its value ()\n  // As we are using Hooks to set the state, we need to\n  // make this its own function\n\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target; // To set the state, we use setCredentials from the Hook\n    // and we spread in our user credentials, and just update\n    // the value that needs to be changed\n\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  }; // We no longer need the render method, as this is now a\n  // functional component\n\n\n  return React.createElement(SignInContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(SignInTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"I already have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    handleChange: handleChange,\n    label: \"Email\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    handleChange: handleChange,\n    label: \"Password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(ButtonsBarContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Sign In\"), React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Sign In With Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  // In the function, we get back the email and password,\n  // which we pass into our emailSignInStart action as an\n  // object where the keys go to the values\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/workspace/crwn-clothing/client/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignInContainer","SignInTitle","ButtonsBarContainer","SignIn","userCredentials","setCredentials","email","password","handleSubmit","event","preventDefault","handleChange","value","name","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n// Import FormInput\nimport FormInput from '../form-input/form-input.component'\n// Import CustomButton\nimport CustomButton from '../custom-button/custom-button.component'\n// Import our actions to enable the sagas\nimport {\n    googleSignInStart,\n    emailSignInStart\n} from '../../redux/user/user.actions';\n// Import styled components\nimport {\n    SignInContainer,\n    SignInTitle,\n    ButtonsBarContainer\n} from './sign-in.styles';\n\n// Now that we are using Hooks, we can convert this component\n// to a functional component, instead of a class component\n// We need to destructure emailSignInStart & googleSignInStart\n// to enable passing them in to the inner component\nconst SignIn = ({ emailSignInStart, googleSignInStart }) => {\n    // We are using Hooks, so we no longer need a\n    // constructor method to set the state. Instead,\n    // we use the useState() Hook and we pass in the\n    // object containing the email and password\n    const [userCredentials, setCredentials] = useState({\n        email: '',\n        password: ''\n    });\n\n    // We need to destructure our email and password from\n    // userCredentials, so that we can use the auth's\n    // signInWithEmailAndPassword method to varify the\n    // details. If they are correct, we sign the user in\n    const { email, password } = userCredentials;\n\n    // We want full control over what the submit will do,\n    // so we use preventDefault to stop this and specify\n    // what needs to be done\n    // We then pass this in to the form onSubmit attribute\n    // As we are using Hooks to set the state, we need to\n    // make this its own function\n    const handleSubmit = async event => {\n        event.preventDefault();\n        // Then we call our emailSignInStart and pass in our\n        // email and password\n        emailSignInStart(email, password);\n    };\n\n    // When there is a change to the form fields, we want\n    // to pull the input field's name and value - the target\n    // is the input field itself\n    // We will then dynamically set the state to the relevant\n    // data, so the name will be that of the input field and\n    // the value will be its value ()\n    // As we are using Hooks to set the state, we need to\n    // make this its own function\n    const handleChange = event => {\n        const { value, name } = event.target;\n        // To set the state, we use setCredentials from the Hook\n        // and we spread in our user credentials, and just update\n        // the value that needs to be changed\n        setCredentials({\n            ...userCredentials,\n            [name]: value\n        });\n    }\n\n    // We no longer need the render method, as this is now a\n    // functional component\n    return (\n        <SignInContainer>\n            <SignInTitle>I already have an account</SignInTitle>\n            <span>Sign in with your email and password</span>\n\n            <form onSubmit={ handleSubmit }>\n                <FormInput\n                    name=\"email\"\n                    type=\"email\"\n                    value={ email }\n                    handleChange={ handleChange }\n                    label=\"Email\"\n                    required\n                />\n                <FormInput\n                    name=\"password\"\n                    type=\"password\"\n                    value={ password }\n                    handleChange={ handleChange }\n                    label=\"Password\"\n                    required\n                />\n\n                <ButtonsBarContainer>\n                    <CustomButton\n                        type='submit'\n                    >Sign In\n                        </CustomButton>\n                    <CustomButton\n                        type='button'\n                        onClick={googleSignInStart}\n                        isGoogleSignIn\n                    >\n                        Sign In With Google\n                        </CustomButton>\n                </ButtonsBarContainer>\n            </form>\n        </SignInContainer>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    // In the function, we get back the email and password,\n    // which we pass into our emailSignInStart action as an\n    // object where the keys go to the values\n    emailSignInStart: (email, password) =>\n        dispatch(emailSignInStart({ email, password }))\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(SignIn);\n"]},"metadata":{},"sourceType":"module"}