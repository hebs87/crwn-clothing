{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSignInSuccess, googleSignInFailure, googleSignInStart } from './user.actions';\nexport function* signInWithGoogle() {\n  try {\n    // When we sign in, we get our userRef, but we only want the\n    // user object from it, so we destructure that first\n    // We don't use the auth.signInWithGoogle(googleProvider)\n    // function directly from the firebase utils, because we want\n    // to access the object that gets returned from the success\n    // of our signInWithPopup\n    const {\n      user\n    } = yield auth.signInWithPopUp(googleProvider); // The userRef is now what we will get back when we call our\n    // createUserProfileDocument and our user. This is the same as\n    // const userRef = await createUserProfileDocument(userAuth);\n    // that was initially in the App.js file, only it is in the\n    // form of a yield, rather than an async await\n\n    const userRef = yield call(createUserProfileDocument, user); // We get our snapshop by calling .get() on the userRef\n\n    const userSnapshot = yield userRef.get(); // We now want to issue out our success action and pass in\n    // the snapshot id and spread in the rest of the data\n\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    // If we get an error, we want to yield the put of that\n    // into our failure action and pass in the error message\n    yield put(googleSignInFailure(error.message));\n  }\n}\n; // We build our onGoogleSignInStart generator function\n// which is declared using the function* syntax\n// The generator function uses the takeLatest method which\n// listens to every action of a specific type (first argument),\n// and also a second generator function (second argument) - this\n// is how we step through the yield code. It only invokes the\n// latest action, so if the signInWithGoogle Saga is run\n// multiple times, it will cancel all other previous ones\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n; // We create a userSagas that calls our onGoogleSignInStart\n// saga, so that this can be passed in to the root saga\n\nexport function* userSagas() {\n  yield call([onGoogleSignInStart]);\n}\n;","map":{"version":3,"sources":["/workspace/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","googleSignInSuccess","googleSignInFailure","googleSignInStart","signInWithGoogle","user","signInWithPopUp","userRef","userSnapshot","get","id","data","error","message","onGoogleSignInStart","GOOGLE_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SACIC,IADJ,EAEIC,cAFJ,EAGIC,yBAHJ,QAIO,+BAJP;AAMA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,iBAHJ,QAIO,gBAJP;AAMA,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACQ,eAAL,CAAqBP,cAArB,CAAvB,CAPA,CAQA;AACA;AACA;AACA;AACA;;AACA,UAAMQ,OAAO,GAAG,MAAMX,IAAI,CAACI,yBAAD,EAA4BK,IAA5B,CAA1B,CAbA,CAcA;;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAfA,CAgBA;AACA;;AACA,UAAMf,GAAG,CACLO,mBAAmB,CAAC;AAChBS,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADD;AAEhB,SAAGF,YAAY,CAACG,IAAb;AAFa,KAAD,CADd,CAAT;AAMH,GAxBD,CAwBE,OAAOC,KAAP,EAAc;AACZ;AACA;AACA,UAAMlB,GAAG,CAACQ,mBAAmB,CAACU,KAAK,CAACC,OAAP,CAApB,CAAT;AACH;AACJ;AAAA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAMrB,UAAU,CACZI,eAAe,CAACkB,oBADJ,EAEZX,gBAFY,CAAhB;AAIH;AAAA,C,CAED;AACA;;AACA,OAAO,UAAUY,SAAV,GAAsB;AACzB,QAAMpB,IAAI,CAAC,CAACkB,mBAAD,CAAD,CAAV;AACH;AAAA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport {\n    auth,\n    googleProvider,\n    createUserProfileDocument\n} from '../../firebase/firebase.utils';\n\nimport {\n    googleSignInSuccess,\n    googleSignInFailure,\n    googleSignInStart\n} from './user.actions';\n\nexport function* signInWithGoogle() {\n    try {\n        // When we sign in, we get our userRef, but we only want the\n        // user object from it, so we destructure that first\n        // We don't use the auth.signInWithGoogle(googleProvider)\n        // function directly from the firebase utils, because we want\n        // to access the object that gets returned from the success\n        // of our signInWithPopup\n        const { user } = yield auth.signInWithPopUp(googleProvider);\n        // The userRef is now what we will get back when we call our\n        // createUserProfileDocument and our user. This is the same as\n        // const userRef = await createUserProfileDocument(userAuth);\n        // that was initially in the App.js file, only it is in the\n        // form of a yield, rather than an async await\n        const userRef = yield call(createUserProfileDocument, user);\n        // We get our snapshop by calling .get() on the userRef\n        const userSnapshot = yield userRef.get();\n        // We now want to issue out our success action and pass in\n        // the snapshot id and spread in the rest of the data\n        yield put(\n            googleSignInSuccess({\n                id: userSnapshot.id,\n                ...userSnapshot.data()\n            })\n        );\n    } catch (error) {\n        // If we get an error, we want to yield the put of that\n        // into our failure action and pass in the error message\n        yield put(googleSignInFailure(error.message));\n    }\n};\n\n// We build our onGoogleSignInStart generator function\n// which is declared using the function* syntax\n// The generator function uses the takeLatest method which\n// listens to every action of a specific type (first argument),\n// and also a second generator function (second argument) - this\n// is how we step through the yield code. It only invokes the\n// latest action, so if the signInWithGoogle Saga is run\n// multiple times, it will cancel all other previous ones\nexport function* onGoogleSignInStart() {\n    yield takeLatest(\n        UserActionTypes.GOOGLE_SIGN_IN_START,\n        signInWithGoogle\n    );\n};\n\n// We create a userSagas that calls our onGoogleSignInStart\n// saga, so that this can be passed in to the root saga\nexport function* userSagas() {\n    yield call([onGoogleSignInStart]);\n};\n"]},"metadata":{},"sourceType":"module"}