{"ast":null,"code":"// Import the action type so we can set it as the case\nimport { UserActionTypes } from './user.types'; // We want to set our default state here, which\n// will be passed into the reducer as the default\n// This was what we initially set in the App.js\n// file, but we're just moving it into here instead\n\nconst INITIAL_STATE = {\n  currentUser: null\n}; // We set INITIAL_STATE as the default value of state\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  // Use a switch statement to check the action.type\n  switch (action.type) {\n    // If the type is GOOGLE_SIGN_IN_SUCCESS or\n    // EMAIL_SIGN_IN_SUCCESS\n    // We can stack these on top of eachother, as\n    // the return statement is the same\n    case UserActionTypes.GOOGLE_SIGN_IN_SUCCESS:\n    case UserActionTypes.EMAIL_SIGN_IN_SUCCESS:\n      // We return a new object where we spread in\n      // the state, and we update the\n      // currentUser property valie to the payload\n      // React components ONLY re-render IF the props\n      // are different, so we need to use an object to\n      // update the props, so the object it has is new\n      // We also want to set the error value back to null,\n      // to clear any previous errors if there was a\n      // failed sign-in attempt\n      return { ...state,\n        currentUser: action.payload\n      };\n    // The default value will be our previous state\n    // if the type doesn't match the reducer's congfig\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["/workspace/crwn-clothing/src/redux/user/user.reducer.js"],"names":["UserActionTypes","INITIAL_STATE","currentUser","userReducer","state","action","type","GOOGLE_SIGN_IN_SUCCESS","EMAIL_SIGN_IN_SUCCESS","payload"],"mappings":"AAAA;AACA,SAASA,eAAT,QAAgC,cAAhC,C,CAEA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,WAAW,EAAE;AADK,CAAtB,C,CAIA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAmC;AACnD;AACA,UAAOA,MAAM,CAACC,IAAd;AACI;AACA;AACA;AACA;AACA,SAAKN,eAAe,CAACO,sBAArB;AACA,SAAKP,eAAe,CAACQ,qBAArB;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,EACH,GAAGJ,KADA;AAEHF,QAAAA,WAAW,EAAEG,MAAM,CAACI;AAFjB,OAAP;AAKJ;AACA;;AACA;AACI,aAAOL,KAAP;AAxBR;AA0BH,CA5BD;;AA8BA,eAAeD,WAAf","sourcesContent":["// Import the action type so we can set it as the case\nimport { UserActionTypes } from './user.types';\n\n// We want to set our default state here, which\n// will be passed into the reducer as the default\n// This was what we initially set in the App.js\n// file, but we're just moving it into here instead\nconst INITIAL_STATE = {\n    currentUser: null\n}\n\n// We set INITIAL_STATE as the default value of state\nconst userReducer = (state = INITIAL_STATE, action) => {\n    // Use a switch statement to check the action.type\n    switch(action.type) {\n        // If the type is GOOGLE_SIGN_IN_SUCCESS or\n        // EMAIL_SIGN_IN_SUCCESS\n        // We can stack these on top of eachother, as\n        // the return statement is the same\n        case UserActionTypes.GOOGLE_SIGN_IN_SUCCESS:\n        case UserActionTypes.EMAIL_SIGN_IN_SUCCESS:\n            // We return a new object where we spread in\n            // the state, and we update the\n            // currentUser property valie to the payload\n            // React components ONLY re-render IF the props\n            // are different, so we need to use an object to\n            // update the props, so the object it has is new\n            // We also want to set the error value back to null,\n            // to clear any previous errors if there was a\n            // failed sign-in attempt\n            return {\n                ...state,\n                currentUser: action.payload\n            }\n\n        // The default value will be our previous state\n        // if the type doesn't match the reducer's congfig\n        default:\n            return state;\n    }\n};\n\nexport default userReducer;"]},"metadata":{},"sourceType":"module"}