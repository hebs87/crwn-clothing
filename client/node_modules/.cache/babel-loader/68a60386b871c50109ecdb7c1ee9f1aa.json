{"ast":null,"code":"var _jsxFileName = \"/workspace/crwn-clothing/src/App.js\";\nimport React, { useEffect } from 'react'; // Import Switch and Route to enable routing\n\nimport { Switch, Route, Redirect } from 'react-router-dom'; // Import connect to enable the app to access redux\n\nimport { connect } from 'react-redux'; // Import createStructured selector to allow multiple selector calls\n\nimport { createStructuredSelector } from 'reselect';\nimport './App.css'; // Import HomePage Component\n\nimport HomePage from './pages/homepage/homepage.component'; // Import ShopPage Component\n\nimport ShopPage from './pages/shop/shop.component'; // Import SignInAndSignUp Component\n\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component'; // Import CheckoutPage component\n\nimport CheckoutPage from './pages/checkout/checkout.component'; // Import Header Component\n\nimport Header from './components/header/header.component'; // Import auth from firebase utiils\n// Import selectors to pass into mapStateToProps\n\nimport { selectCurrentUser } from './redux/user/user.selectors'; // import checkUserSession for user persistence (passed into dispatch)\n\nimport { checkUserSession } from './redux/user/user.actions'; // Now that we are using Hooks, we can convert this component\n// to a functional component\n// Destructure the checkUserSession from mapDispatchToProps\n// Destructure the currentUser from mapStateToProps\n\nconst App = ({\n  checkUserSession,\n  currentUser\n}) => {\n  // We use the useEffect() Hook to replace the\n  // componentDidMount() method\n  useEffect(() => {\n    // Instantiate checkUserSession to listen to user state\n    checkUserSession(); // As we want this to behave as a componentDidMount() and\n    // we only want this to render when our checkUserSession\n    // value changes, we pass that prop into the array\n  }, [checkUserSession]);\n  useEffect(() => {\n    const unsubscribeFromAuth = null;\n    return () => {\n      unsubscribeFromAuth();\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: HomePage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/shop\",\n    component: ShopPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/checkout\",\n    component: CheckoutPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/signin\",\n    render: () => currentUser ? React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }) : React.createElement(SignInAndSignUp, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })));\n}; // FOR REDIRECTING THE USER TO HOME PAGE IF SIGNED IN\n// We want to get our redux user state\n\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n}); // This dispatches our checkUserSession action - passed\n// into componenentDidMount to enable user persistance\n\nconst mapDispatchToProps = dispatch => ({\n  checkUserSession: () => dispatch(checkUserSession())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/workspace/crwn-clothing/src/App.js"],"names":["React","useEffect","Switch","Route","Redirect","connect","createStructuredSelector","HomePage","ShopPage","SignInAndSignUp","CheckoutPage","Header","selectCurrentUser","checkUserSession","App","currentUser","unsubscribeFromAuth","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,OAAO,WAAP,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,qCAArB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,6BAArB,C,CACA;;AACA,OAAOC,eAAP,MAA4B,2DAA5B,C,CACA;;AACA,OAAOC,YAAP,MAAyB,qCAAzB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,sCAAnB,C,CACA;AACA;;AACA,SAASC,iBAAT,QAAkC,6BAAlC,C,CACA;;AACA,SAASC,gBAAT,QAAiC,2BAAjC,C,CAEA;AACA;AACA;AACA;;AACA,MAAMC,GAAG,GAAG,CAAC;AAAED,EAAAA,gBAAF;AAAoBE,EAAAA;AAApB,CAAD,KAAuC;AAC/C;AACA;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAY,IAAAA,gBAAgB,GAFJ,CAGhB;AACA;AACA;AACC,GANQ,EAMN,CAACA,gBAAD,CANM,CAAT;AAQAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMe,mBAAmB,GAAG,IAA5B;AAEA,WAAO,MAAM;AACTA,MAAAA,mBAAmB;AACtB,KAFD;AAGH,GANQ,EAMN,EANM,CAAT;AAQA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,SAAS,EAAET,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,SAAS,EAAEC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,WAAlB;AAA8B,IAAA,SAAS,EAAEE,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII,oBAAC,KAAD;AACI,IAAA,KAAK,MADT;AAEI,IAAA,IAAI,EAAC,SAFT;AAGI,IAAA,MAAM,EAAE,MACJK,WAAW,GACN,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADM,GAGN,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAFJ,CADJ;AAoBH,CAvCD,C,CAyCA;AACA;;;AACA,MAAME,eAAe,GAAGX,wBAAwB,CAAC;AAC7CS,EAAAA,WAAW,EAAEH;AADgC,CAAD,CAAhD,C,CAIA;AACA;;AACA,MAAMM,kBAAkB,GAAGC,QAAQ,KAAK;AACpCN,EAAAA,gBAAgB,EAAE,MAAMM,QAAQ,CAACN,gBAAgB,EAAjB;AADI,CAAL,CAAnC;;AAIA,eAAeR,OAAO,CAClBY,eADkB,EAElBC,kBAFkB,CAAP,CAGbJ,GAHa,CAAf","sourcesContent":["import React, { useEffect } from 'react';\n// Import Switch and Route to enable routing\nimport { Switch, Route, Redirect } from 'react-router-dom';\n// Import connect to enable the app to access redux\nimport { connect } from 'react-redux';\n// Import createStructured selector to allow multiple selector calls\nimport { createStructuredSelector } from 'reselect';\n\nimport './App.css';\n\n// Import HomePage Component\nimport HomePage from './pages/homepage/homepage.component';\n// Import ShopPage Component\nimport ShopPage from './pages/shop/shop.component'\n// Import SignInAndSignUp Component\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component'\n// Import CheckoutPage component\nimport CheckoutPage from './pages/checkout/checkout.component';\n\n// Import Header Component\nimport Header from './components/header/header.component'\n// Import auth from firebase utiils\n// Import selectors to pass into mapStateToProps\nimport { selectCurrentUser } from './redux/user/user.selectors';\n// import checkUserSession for user persistence (passed into dispatch)\nimport { checkUserSession } from './redux/user/user.actions';\n\n// Now that we are using Hooks, we can convert this component\n// to a functional component\n// Destructure the checkUserSession from mapDispatchToProps\n// Destructure the currentUser from mapStateToProps\nconst App = ({ checkUserSession, currentUser }) => {\n    // We use the useEffect() Hook to replace the\n    // componentDidMount() method\n    useEffect(() => {\n        // Instantiate checkUserSession to listen to user state\n        checkUserSession();\n    // As we want this to behave as a componentDidMount() and\n    // we only want this to render when our checkUserSession\n    // value changes, we pass that prop into the array\n    }, [checkUserSession]);\n\n    useEffect(() => {\n        const unsubscribeFromAuth = null;\n\n        return () => {\n            unsubscribeFromAuth();\n        };\n    }, []);\n    \n    return (\n        <div>\n            <Header />\n            <Switch>\n                <Route exact path='/' component={HomePage} />\n                <Route path='/shop' component={ShopPage} />\n                <Route exact path='/checkout' component={CheckoutPage} />\n                <Route\n                    exact\n                    path='/signin'\n                    render={() =>\n                        currentUser ?\n                            (<Redirect to='/' />)\n                            :\n                            (<SignInAndSignUp />)\n                    }\n                />\n            </Switch>\n        </div>\n    );\n};\n\n// FOR REDIRECTING THE USER TO HOME PAGE IF SIGNED IN\n// We want to get our redux user state\nconst mapStateToProps = createStructuredSelector({\n    currentUser: selectCurrentUser\n});\n\n// This dispatches our checkUserSession action - passed\n// into componenentDidMount to enable user persistance\nconst mapDispatchToProps = dispatch => ({\n    checkUserSession: () => dispatch(checkUserSession())\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n"]},"metadata":{},"sourceType":"module"}