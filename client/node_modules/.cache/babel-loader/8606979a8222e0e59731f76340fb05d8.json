{"ast":null,"code":"import { createSelector } from 'reselect'; // Create input selector to get the shop reducer part of the rootReducer\n\nconst selectShop = state => state.shop; // Create output selector to select the collections\n// part of the shopReducer\n\n\nexport const selectShopCollections = createSelector([selectShop], shop => shop.collections); // Following data normalization, we now need to convert\n// the object's keys to an array, so that the CollectionsOverview\n// component can use these array values to map over the\n// collections and then pass them in to the CollectionPreview\n\nexport const selectShopCollectionsForPreview = createSelector( // We get the object\n[selectShopCollections], // keys() converts the values of the collections keys to an\n// array (['hats', 'jackets', etc.]), and we then use map()\n// to map over the array of keys and return the collections\n// at that key value.\n// As pulling the data from the backend is an async function,\n// the data can be in a state of null. If that's the case, we\n// want to return an empty array. Then when the there is data,\n// we can map over it.\ncollections => collections ? Object.keys(collections).map(key => collections[key]) : []); // This selector will use the selectShopCollections selector\n// We use 'currying' to create a function that takes the\n// collectionUrlParam (hats/jackets, etc.) and then uses the\n// createSelector method to take the collections from the\n// selectShopCollections selector. It finds the collections\n// at the collectionUrlParam (the string that is passed in\n// from the mapStateToProps function in the Collection file)\n\nexport const selectShopCollection = collectionUrlParam => createSelector([selectShopCollections], collections => // If the collections object doesn't exist,\n// we want to return a null value. If it does\n// exist, we want to return our collections\ncollections ? collections[collectionUrlParam] : null); // Once we've moved our fetching of the shop data\n// functionality into our reducer and created the\n// relevant actions, we create this selector to\n// enable us to set the fetching state to use our\n// spinner when loading the data\n\nexport const selectIsCollectionFetching = createSelector([selectShop], shop => shop.isFetching); // This selector determines whether the collection\n// request has loaded successfully, and returns us\n// a boolean value of whether the collection is\n// null or not - !! converts the truthy or falsy\n// value to an actual boolean value\n\nexport const selectIsCollectionsLoaded = createSelector([selectShop], shop => !!shop.collections);","map":{"version":3,"sources":["/workspace/crwn-clothing/src/redux/shop/shop.selectors.js"],"names":["createSelector","selectShop","state","shop","selectShopCollections","collections","selectShopCollectionsForPreview","Object","keys","map","key","selectShopCollection","collectionUrlParam","selectIsCollectionFetching","isFetching","selectIsCollectionsLoaded"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC,C,CAEA;AACA;;;AACA,OAAO,MAAMC,qBAAqB,GAAGJ,cAAc,CAC/C,CAACC,UAAD,CAD+C,EAE/CE,IAAI,IAAIA,IAAI,CAACE,WAFkC,CAA5C,C,CAKP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,+BAA+B,GAAGN,cAAc,EACzD;AACA,CAACI,qBAAD,CAFyD,EAGzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,WAAW,IAAIA,WAAW,GACtBE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA6BC,GAAG,IAAIL,WAAW,CAACK,GAAD,CAA/C,CADsB,GAGtB,EAdqD,CAAtD,C,CAiBP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,oBAAoB,GAAGC,kBAAkB,IAClDZ,cAAc,CACV,CAACI,qBAAD,CADU,EAEVC,WAAW,IACP;AACA;AACA;AACCA,WAAW,GACRA,WAAW,CAACO,kBAAD,CADH,GAGR,IATE,CADX,C,CAaP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,0BAA0B,GAAGb,cAAc,CACpD,CAACC,UAAD,CADoD,EAEpDE,IAAI,IAAIA,IAAI,CAACW,UAFuC,CAAjD,C,CAKP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAGf,cAAc,CACnD,CAACC,UAAD,CADmD,EAEnDE,IAAI,IAAI,CAAC,CAACA,IAAI,CAACE,WAFoC,CAAhD","sourcesContent":["import { createSelector } from 'reselect';\n\n// Create input selector to get the shop reducer part of the rootReducer\nconst selectShop = state => state.shop;\n\n// Create output selector to select the collections\n// part of the shopReducer\nexport const selectShopCollections = createSelector(\n    [selectShop],\n    shop => shop.collections\n);\n\n// Following data normalization, we now need to convert\n// the object's keys to an array, so that the CollectionsOverview\n// component can use these array values to map over the\n// collections and then pass them in to the CollectionPreview\nexport const selectShopCollectionsForPreview = createSelector(\n    // We get the object\n    [selectShopCollections],\n    // keys() converts the values of the collections keys to an\n    // array (['hats', 'jackets', etc.]), and we then use map()\n    // to map over the array of keys and return the collections\n    // at that key value.\n    // As pulling the data from the backend is an async function,\n    // the data can be in a state of null. If that's the case, we\n    // want to return an empty array. Then when the there is data,\n    // we can map over it.\n    collections => collections ? \n        Object.keys(collections).map(key => collections[key])\n        :\n        []\n);\n\n// This selector will use the selectShopCollections selector\n// We use 'currying' to create a function that takes the\n// collectionUrlParam (hats/jackets, etc.) and then uses the\n// createSelector method to take the collections from the\n// selectShopCollections selector. It finds the collections\n// at the collectionUrlParam (the string that is passed in\n// from the mapStateToProps function in the Collection file)\nexport const selectShopCollection = collectionUrlParam =>\n    createSelector(\n        [selectShopCollections],\n        collections =>\n            // If the collections object doesn't exist,\n            // we want to return a null value. If it does\n            // exist, we want to return our collections\n            (collections ?\n                collections[collectionUrlParam]\n                :\n                null)\n    );\n\n// Once we've moved our fetching of the shop data\n// functionality into our reducer and created the\n// relevant actions, we create this selector to\n// enable us to set the fetching state to use our\n// spinner when loading the data\nexport const selectIsCollectionFetching = createSelector(\n    [selectShop],\n    shop => shop.isFetching\n);\n\n// This selector determines whether the collection\n// request has loaded successfully, and returns us\n// a boolean value of whether the collection is\n// null or not - !! converts the truthy or falsy\n// value to an actual boolean value\nexport const selectIsCollectionsLoaded = createSelector(\n    [selectShop],\n    shop => !!shop.collections\n);\n"]},"metadata":{},"sourceType":"module"}