{"ast":null,"code":"var _jsxFileName = \"/workspace/crwn-clothing/src/components/sign-up/sign-up.component.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux'; // Import FormInput for our form\n\nimport FormInput from '../form-input/form-input.component'; // Import CustomButton for our form's buttons\n\nimport CustomButton from '../custom-button/custom-button.component'; // Import our action so we can dispatch it into our component\n\nimport { signUpStart } from '../../redux/user/user.actions'; // Import styled components\n\nimport { SignUpContainer, SignUpTitle } from './sign-up.styles'; // Now that we are using Hooks, we can convert this component\n// to a functional component, instead of a class component\n// We need to destructure the relevant props to enable passing\n// them in to the inner component\n\nconst SignUp = () => {\n  // We are using Hooks, so we no longer need a\n  // constructor method to set the state. Instead,\n  // we use the useState() Hook and we pass in the\n  // object containing the displayName, email, password\n  // and confirmPassword, which are all initially\n  // empty strings\n  const [userCredentials, setCredentials] = useState({\n    displayName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }); // We destructure all the props from the state\n\n  const {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  } = setCredentials; // Now that we are using Hooks, we can convert this component\n  // to a functional component, instead of a class component\n\n  const handleSubmit = async event => {\n    // We want to prevent the default when the form is submitted\n    event.preventDefault(); // If the passwords don't match, we display an alert\n\n    if (password !== confirmPassword) {\n      alert(\"Passwords don't match\");\n      return;\n    } // If the passwords do match, we call our signUpStart\n    // method and pass in the email, password and displayName\n    // These are the userCredentials that get passed in our\n    // mapDispatchToProps\n\n\n    signUpStart({\n      email,\n      password,\n      displayName\n    });\n  }; // This is the same as the sign in method\n  // This is the same as the sign in method\n  // Now that we are using Hooks, we can convert this component\n  // to a functional component, instead of a class component\n\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return React.createElement(SignUpContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(SignUpTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"I do not have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Sign up with your email and password\"), React.createElement(\"form\", {\n    className: \"sign-up-form\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    type: \"text\",\n    name: \"displayName\",\n    value: displayName,\n    handleChange: handleChange,\n    label: \"Display Name\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    type: \"email\",\n    name: \"email\",\n    value: email,\n    handleChange: handleChange,\n    label: \"Email\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    handleChange: handleChange,\n    label: \"Password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    type: \"password\",\n    name: \"confirmPassword\",\n    value: confirmPassword,\n    handleChange: handleChange,\n    label: \"Confirm Password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"SIGN UP\")));\n}; // This allows us to dispatch the email, password\n// and displayName credentials to our props\n\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: userCredentials => dispatch(signUpStart(userCredentials))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);","map":{"version":3,"sources":["/workspace/crwn-clothing/src/components/sign-up/sign-up.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","signUpStart","SignUpContainer","SignUpTitle","SignUp","userCredentials","setCredentials","displayName","email","password","confirmPassword","handleSubmit","event","preventDefault","alert","handleChange","name","value","target","setState","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n// Import FormInput for our form\nimport FormInput from '../form-input/form-input.component';\n// Import CustomButton for our form's buttons\nimport CustomButton from '../custom-button/custom-button.component';\n// Import our action so we can dispatch it into our component\nimport { signUpStart } from '../../redux/user/user.actions';\n\n// Import styled components\nimport {\n    SignUpContainer,\n    SignUpTitle\n} from './sign-up.styles';\n\n// Now that we are using Hooks, we can convert this component\n// to a functional component, instead of a class component\n// We need to destructure the relevant props to enable passing\n// them in to the inner component\nconst SignUp = () => {\n    // We are using Hooks, so we no longer need a\n    // constructor method to set the state. Instead,\n    // we use the useState() Hook and we pass in the\n    // object containing the displayName, email, password\n    // and confirmPassword, which are all initially\n    // empty strings\n    const [userCredentials, setCredentials] = useState({\n        displayName: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n    });\n\n    // We destructure all the props from the state\n    const { displayName, email, password, confirmPassword } = setCredentials;\n\n    // Now that we are using Hooks, we can convert this component\n    // to a functional component, instead of a class component\n    const handleSubmit = async event => {\n        // We want to prevent the default when the form is submitted\n        event.preventDefault();\n        // If the passwords don't match, we display an alert\n        if (password !== confirmPassword) {\n            alert(\"Passwords don't match\");\n            return;\n        }\n        // If the passwords do match, we call our signUpStart\n        // method and pass in the email, password and displayName\n        // These are the userCredentials that get passed in our\n        // mapDispatchToProps\n        signUpStart({ email, password, displayName });\n    };\n\n    // This is the same as the sign in method\n    // This is the same as the sign in method\n    // Now that we are using Hooks, we can convert this component\n    // to a functional component, instead of a class component\n    const handleChange = event => {\n        const { name, value } = event.target;\n\n        this.setState({\n            ...userCredentials,\n            [name]: value\n        });\n    }\n\n        return(\n            <SignUpContainer>\n                <SignUpTitle>I do not have an account</SignUpTitle>\n                <span>Sign up with your email and password</span>\n\n                <form className='sign-up-form' onSubmit={ handleSubmit }>\n                    <FormInput\n                        type='text'\n                        name='displayName'\n                        value={ displayName }\n                        handleChange={ handleChange }\n                        label='Display Name'\n                        required\n                    />\n                    <FormInput\n                        type='email'\n                        name='email'\n                        value={ email }\n                        handleChange={ handleChange }\n                        label='Email'\n                        required\n                    />\n                    <FormInput\n                        type='password'\n                        name='password'\n                        value={ password }\n                        handleChange={ handleChange }\n                        label='Password'\n                        required\n                    />\n                    <FormInput\n                        type='password'\n                        name='confirmPassword'\n                        value={ confirmPassword }\n                        handleChange={ handleChange }\n                        label='Confirm Password'\n                        required\n                    />\n\n                    <CustomButton type='submit'>SIGN UP</CustomButton>\n                </form>\n            </SignUpContainer>\n        );\n    }\n\n\n// This allows us to dispatch the email, password\n// and displayName credentials to our props\nconst mapDispatchToProps = dispatch => ({\n    signUpStart: userCredentials =>\n        dispatch(signUpStart(userCredentials))\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(SignUp);\n"]},"metadata":{},"sourceType":"module"}