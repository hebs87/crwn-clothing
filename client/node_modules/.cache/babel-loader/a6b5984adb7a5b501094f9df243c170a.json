{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument // getCurrentUser is for user persistence\n, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess } from './user.actions'; // This function gets the snapshot from the userAuth object\n// and it will be passed into our signInWithGoogle and\n// signInWithEmail generator functions\n// The second parameter will be the additionalData (displayName),\n// but it is optional. It will be passed in to the yield call for\n// our userRef - if it contains the displayName (on sign up) then\n// that will be passed in, if it is null then no value will be\n// passed in\n\nexport function* getSnapshotFromUserAuth(userAuth, displayName) {\n  try {\n    // The userRef is what we will get back when we call our\n    // createUserProfileDocument and our user. This is the same as\n    // const userRef = await createUserProfileDocument(userAuth);\n    // that was initially in the App.js file, only it is in the\n    // form of a yield, rather than an async await\n    const userRef = yield call(createUserProfileDocument, userAuth, displayName); // We get our snapshop by calling .get() on the userRef\n\n    const userSnapshot = yield userRef.get(); // We now want to issue out our success action and pass in\n    // the snapshot id and spread in the rest of the data\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    // If we get an error, we want to yield the put of that\n    // into our failure action and pass in the error message\n    yield put(signInFailure(error.message));\n  }\n} // Although we will be calling our getSnapshotFromUserAuth\n// generator function that has its own try catch block, which\n// is a repitition of the one in this function, the error\n// that will be displayed here is if there is one with the\n// signInWithPopUp function instead - we want to have a try\n// catch block for any API requests\n\nexport function* signInWithGoogle() {\n  try {\n    // When we sign in, we get our userRef, but we only want the\n    // user object from it, so we destructure that first\n    // We don't use the auth.signInWithPopup(googleProvider)\n    // function directly from the firebase utils, because we want\n    // to access the object that gets returned from the success\n    // of our signInWithPopup\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider); // We yield our getSnapshotFromUserAuth generator function\n    // and pass in the user object\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    // If we get an error, we want to yield the put of that\n    // into our failure action and pass in the error message\n    yield put(signInFailure(error.message));\n  }\n}\n; // For signing in with email, we only want our email and password\n// from our payload, so we need to destructure that in our params\n// Although we will be calling our getSnapshotFromUserAuth\n// generator function that has its own try catch block, which\n// is a repitition of the one in this function, the error\n// that will be displayed here is if there is one with the\n// signInWithEmailAndPassword function instead - we want to have\n// a try catch block for any API requests\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    // Again, as with the above generator function, we want our user\n    // from the userRef object, but this time, we need to us the\n    // signInWithEmailAndPassword method instead and pass in the\n    // email and password that we've plucked from the payload\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password); // We yield our getSnapshotFromUserAuth generator function\n    // and pass in the user object\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    // If we get an error, we want to yield the put of that\n    // into our failure action and pass in the error message\n    yield put(signInFailure(error.message));\n  }\n}\n; // This performs an API call to check whether the user is signed in\n// It uses the Promise that we created in our firebase utils\n\nexport function* isUserAuthenticated() {\n  try {\n    // We get back the userAuth object when we call\n    // our firebase util method - it works in a similar\n    // way to the signIn methods, but instead of using\n    // the popup or email methods, it gets the userAuth\n    const userAuth = yield getCurrentUser(); // If the userAuth is null, we want to return out of\n    // the function\n\n    if (!userAuth) return; // If there is a userAuth, then we want to call our\n    // getSnapshotFromUserAuth and pass in the userAuth\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\n; // This performs an API call to listen for the sign out\n// result\n\nexport function* signOut() {\n  try {\n    // We yield the result of the auth.signOut() method\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error.message));\n  }\n}\n; // This contains our sign up logic, so we need to pass in an\n// object containing the relevant information from the\n// payload - email, password and displayName\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    // createUserWithEmailAndPassword is a method from the auth\n    // library which create user with email address and password,\n    // and then returns the user back to us. So here, we want to\n    // destructure the user that is returned from that method -\n    // This is part of the same code that was in our SignUp component,\n    // but we just use yield instead of await\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password); // If the above call is a success then we need to call our\n    // signUpSuccess and pass in an object where the user goes\n    // to user and the additionalData goes to an object containing\n    // the displayName\n\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {}\n}\n; // This saga contains the functionality to sign the user in after\n// successful sign up. We need to get the user and additionalData\n// props from the payload, then we call our getSnapshotFromUserAuth\n// and pass the parameters into it, and that then handles our sign in\n\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n; // We build our onGoogleSignInStart generator function\n// which is declared using the function* syntax\n// The generator function uses the takeLatest method which\n// listens to every action of a specific type (first argument),\n// and also a second generator function (second argument) - this\n// is how we step through the yield code. It only invokes the\n// latest action, so if the signInWithGoogle Saga is run\n// multiple times, it will cancel all other previous ones\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n; // This will be our saga for the onEmailSignInStart, which will\n// be similar to the onGoogleSignInStart saga, except it will\n// be listening for the EMAIL_SIGN_IN_START action type and\n// it will trigger the signInWithEmail generator function instead\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n; // This will be our saga that checks for the user auth\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, isUserAuthenticated);\n}\n; // This will be our saga that checks for the sign out\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n; // This will be our saga that checks for the sign up\n// and fires the action to create a new user in the\n// database\n\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n; // This listens for the successful sign up, which\n// fires the saga that signs the user in\n\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n; // We create a userSagas that calls all of our sagas,\n// so that they can be passed into the root saga\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}\n;","map":{"version":3,"sources":["/workspace/crwn-clothing/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","getSnapshotFromUserAuth","userAuth","displayName","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","createUserWithEmailAndPassword","additionalData","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport {\n    auth,\n    googleProvider,\n    createUserProfileDocument,\n    // getCurrentUser is for user persistence\n    getCurrentUser\n} from '../../firebase/firebase.utils';\n\nimport {\n    signInSuccess,\n    signInFailure,\n    signOutSuccess,\n    signOutFailure,\n    signUpSuccess\n} from './user.actions';\n\n// This function gets the snapshot from the userAuth object\n// and it will be passed into our signInWithGoogle and\n// signInWithEmail generator functions\n// The second parameter will be the additionalData (displayName),\n// but it is optional. It will be passed in to the yield call for\n// our userRef - if it contains the displayName (on sign up) then\n// that will be passed in, if it is null then no value will be\n// passed in\nexport function* getSnapshotFromUserAuth(userAuth, displayName) {\n    try {\n        // The userRef is what we will get back when we call our\n        // createUserProfileDocument and our user. This is the same as\n        // const userRef = await createUserProfileDocument(userAuth);\n        // that was initially in the App.js file, only it is in the\n        // form of a yield, rather than an async await\n        const userRef = yield call(createUserProfileDocument, userAuth, displayName);\n        // We get our snapshop by calling .get() on the userRef\n        const userSnapshot = yield userRef.get();\n        // We now want to issue out our success action and pass in\n        // the snapshot id and spread in the rest of the data\n        yield put(\n            signInSuccess({\n                id: userSnapshot.id,\n                ...userSnapshot.data()\n            })\n        );\n    } catch (error) {\n        // If we get an error, we want to yield the put of that\n        // into our failure action and pass in the error message\n        yield put(signInFailure(error.message));\n    }\n}\n\n// Although we will be calling our getSnapshotFromUserAuth\n// generator function that has its own try catch block, which\n// is a repitition of the one in this function, the error\n// that will be displayed here is if there is one with the\n// signInWithPopUp function instead - we want to have a try\n// catch block for any API requests\nexport function* signInWithGoogle() {\n    try {\n        // When we sign in, we get our userRef, but we only want the\n        // user object from it, so we destructure that first\n        // We don't use the auth.signInWithPopup(googleProvider)\n        // function directly from the firebase utils, because we want\n        // to access the object that gets returned from the success\n        // of our signInWithPopup\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        // We yield our getSnapshotFromUserAuth generator function\n        // and pass in the user object\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        // If we get an error, we want to yield the put of that\n        // into our failure action and pass in the error message\n        yield put(signInFailure(error.message));\n    }\n};\n\n// For signing in with email, we only want our email and password\n// from our payload, so we need to destructure that in our params\n// Although we will be calling our getSnapshotFromUserAuth\n// generator function that has its own try catch block, which\n// is a repitition of the one in this function, the error\n// that will be displayed here is if there is one with the\n// signInWithEmailAndPassword function instead - we want to have\n// a try catch block for any API requests\nexport function* signInWithEmail({payload: { email, password }}) {\n    try {\n        // Again, as with the above generator function, we want our user\n        // from the userRef object, but this time, we need to us the\n        // signInWithEmailAndPassword method instead and pass in the\n        // email and password that we've plucked from the payload\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        // We yield our getSnapshotFromUserAuth generator function\n        // and pass in the user object\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n        // If we get an error, we want to yield the put of that\n        // into our failure action and pass in the error message\n        yield put(signInFailure(error.message));\n    }\n};\n\n// This performs an API call to check whether the user is signed in\n// It uses the Promise that we created in our firebase utils\nexport function* isUserAuthenticated() {\n    try {\n        // We get back the userAuth object when we call\n        // our firebase util method - it works in a similar\n        // way to the signIn methods, but instead of using\n        // the popup or email methods, it gets the userAuth\n        const userAuth = yield getCurrentUser();\n        // If the userAuth is null, we want to return out of\n        // the function\n        if (!userAuth) return;\n        // If there is a userAuth, then we want to call our\n        // getSnapshotFromUserAuth and pass in the userAuth\n        yield getSnapshotFromUserAuth(userAuth);\n    } catch (error) {\n        yield put(signInFailure(error.message))\n    }\n};\n\n// This performs an API call to listen for the sign out\n// result\nexport function* signOut() {\n    try {\n        // We yield the result of the auth.signOut() method\n        yield auth.signOut();\n        yield put(signOutSuccess());\n    } catch (error) {\n        yield put(signOutFailure(error.message));\n    }\n};\n\n// This contains our sign up logic, so we need to pass in an\n// object containing the relevant information from the\n// payload - email, password and displayName\nexport function* signUp({ payload: { email, password, displayName }}) {\n    try {\n        // createUserWithEmailAndPassword is a method from the auth\n        // library which create user with email address and password,\n        // and then returns the user back to us. So here, we want to\n        // destructure the user that is returned from that method -\n        // This is part of the same code that was in our SignUp component,\n        // but we just use yield instead of await\n        const { user } = yield auth.createUserWithEmailAndPassword(\n            email,\n            password\n        );\n        // If the above call is a success then we need to call our\n        // signUpSuccess and pass in an object where the user goes\n        // to user and the additionalData goes to an object containing\n        // the displayName\n        yield put(signUpSuccess({\n            user,\n            additionalData: { displayName }\n        }));\n    } catch (error) {\n\n    }\n};\n\n// This saga contains the functionality to sign the user in after\n// successful sign up. We need to get the user and additionalData\n// props from the payload, then we call our getSnapshotFromUserAuth\n// and pass the parameters into it, and that then handles our sign in\nexport function* signInAfterSignUp({ payload: { user, additionalData }}) {\n    yield getSnapshotFromUserAuth(user, additionalData);\n};\n\n// We build our onGoogleSignInStart generator function\n// which is declared using the function* syntax\n// The generator function uses the takeLatest method which\n// listens to every action of a specific type (first argument),\n// and also a second generator function (second argument) - this\n// is how we step through the yield code. It only invokes the\n// latest action, so if the signInWithGoogle Saga is run\n// multiple times, it will cancel all other previous ones\nexport function* onGoogleSignInStart() {\n    yield takeLatest(\n        UserActionTypes.GOOGLE_SIGN_IN_START,\n        signInWithGoogle\n    );\n};\n\n// This will be our saga for the onEmailSignInStart, which will\n// be similar to the onGoogleSignInStart saga, except it will\n// be listening for the EMAIL_SIGN_IN_START action type and\n// it will trigger the signInWithEmail generator function instead\nexport function* onEmailSignInStart() {\n    yield takeLatest(\n        UserActionTypes.EMAIL_SIGN_IN_START,\n        signInWithEmail\n    );\n};\n\n// This will be our saga that checks for the user auth\nexport function* onCheckUserSession() {\n    yield takeLatest(\n        UserActionTypes.EMAIL_SIGN_IN_START,\n        isUserAuthenticated\n    )\n};\n\n// This will be our saga that checks for the sign out\nexport function* onSignOutStart() {\n    yield takeLatest(\n        UserActionTypes.SIGN_OUT_START,\n        signOut\n    )\n};\n\n// This will be our saga that checks for the sign up\n// and fires the action to create a new user in the\n// database\nexport function* onSignUpStart() {\n    yield takeLatest(\n        UserActionTypes.SIGN_UP_START,\n        signUp\n    )\n};\n\n// This listens for the successful sign up, which\n// fires the saga that signs the user in\nexport function* onSignUpSuccess() {\n    yield takeLatest(\n        UserActionTypes.SIGN_UP_SUCCESS,\n        signInAfterSignUp\n    )\n};\n\n// We create a userSagas that calls all of our sagas,\n// so that they can be passed into the root saga\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(isUserAuthenticated),\n        call(onSignOutStart),\n        call(onSignUpStart),\n        call(onSignUpSuccess)\n    ]);\n};\n"]},"metadata":{},"sourceType":"module"}