{"ast":null,"code":"// Import CartActionTypes\nimport CartActionTypes from './cart.types'; // Import addItemToCart\n\nimport { addItemToCart, removeItemFromCart } from './cart.utils';\nconst INITIAL_STATE = {\n  // For the CartDropdown toggle feature\n  hidden: true,\n  // For adding items to our cart (initial empty cart)\n  cartItems: []\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\n      return { ...state,\n        // instead of setting a payload, we can\n        // just set the hidden value here to the\n        // opposite of the current state.\n        // This allows the CartIcon to act as a\n        // toggle and change the state to the\n        // opposite when clicked\n        hidden: !state.hidden\n      };\n\n    case CartActionTypes.ADD_ITEM:\n      return { ...state,\n        cartItems: addItemToCart(state.cartItems, action.payload)\n      };\n\n    case CartActionTypes.REMOVE_ITEM:\n      return { ...state,\n        cartItems: removeItemFromCart(state.cartItems, action.payload)\n      };\n\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\n      return { ...state,\n        // We use a filter method, which returns everything\n        // that returns true\n        cartItems: state.cartItems.filter(cartItem => // We compare the cartItem.id to the\n        // action.payload.id. If the IDs don't match,\n        // it returns true and those items remain in\n        // the cart. This causes a new object to be\n        // returned that contains all the cartItems\n        // that haven't been removed\n        cartItem.id !== action.payload.id)\n      };\n    // When the CLEAR_CART action type is dispatched, we\n    // return an object in which we spread in the state\n    // and clear the cart (set the cartItems value back\n    // to an empty array)\n\n    case CartActionTypes.CLEAR_CART:\n      return { ...state,\n        cartItems: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/workspace/crwn-clothing/src/redux/cart/cart.reducer.js"],"names":["CartActionTypes","addItemToCart","removeItemFromCart","INITIAL_STATE","hidden","cartItems","cartReducer","state","action","type","TOGGLE_CART_HIDDEN","ADD_ITEM","payload","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","filter","cartItem","id","CLEAR_CART"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,cAA5B,C,CACA;;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,cAAlD;AAEA,MAAMC,aAAa,GAAG;AAClB;AACAC,EAAAA,MAAM,EAAE,IAFU;AAGlB;AACAC,EAAAA,SAAS,EAAE;AAJO,CAAtB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACnD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,eAAe,CAACU,kBAArB;AACI,aAAO,EACH,GAAGH,KADA;AAEH;AACA;AACA;AACA;AACA;AACA;AACAH,QAAAA,MAAM,EAAE,CAACG,KAAK,CAACH;AARZ,OAAP;;AAUJ,SAAKJ,eAAe,CAACW,QAArB;AACI,aAAO,EACH,GAAGJ,KADA;AAEHF,QAAAA,SAAS,EAAEJ,aAAa,CAACM,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB;AAFrB,OAAP;;AAIJ,SAAKZ,eAAe,CAACa,WAArB;AACI,aAAO,EACH,GAAGN,KADA;AAEHF,QAAAA,SAAS,EAAEH,kBAAkB,CAACK,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB;AAF1B,OAAP;;AAIJ,SAAKZ,eAAe,CAACc,oBAArB;AACI,aAAO,EACH,GAAGP,KADA;AAEH;AACA;AACAF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBU,MAAhB,CAAwBC,QAAQ,IACvC;AACA;AACA;AACA;AACA;AACA;AACAA,QAAAA,QAAQ,CAACC,EAAT,KAAgBT,MAAM,CAACI,OAAP,CAAeK,EAPxB;AAJR,OAAP;AAcL;AACC;AACA;AACA;;AACA,SAAKjB,eAAe,CAACkB,UAArB;AACI,aAAO,EACH,GAAGX,KADA;AAEHF,QAAAA,SAAS,EAAE;AAFR,OAAP;;AAIJ;AACI,aAAOE,KAAP;AA/CR;AAiDH,CAlDD;;AAoDA,eAAeD,WAAf","sourcesContent":["// Import CartActionTypes\nimport CartActionTypes from './cart.types';\n// Import addItemToCart\nimport { addItemToCart, removeItemFromCart } from './cart.utils';\n\nconst INITIAL_STATE = {\n    // For the CartDropdown toggle feature\n    hidden: true,\n    // For adding items to our cart (initial empty cart)\n    cartItems: []\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n        case CartActionTypes.TOGGLE_CART_HIDDEN:\n            return {\n                ...state,\n                // instead of setting a payload, we can\n                // just set the hidden value here to the\n                // opposite of the current state.\n                // This allows the CartIcon to act as a\n                // toggle and change the state to the\n                // opposite when clicked\n                hidden: !state.hidden\n            };\n        case CartActionTypes.ADD_ITEM:\n            return {\n                ...state,\n                cartItems: addItemToCart(state.cartItems, action.payload)\n            };\n        case CartActionTypes.REMOVE_ITEM:\n            return {\n                ...state,\n                cartItems: removeItemFromCart(state.cartItems, action.payload)\n            }\n        case CartActionTypes.CLEAR_ITEM_FROM_CART:\n            return {\n                ...state,\n                // We use a filter method, which returns everything\n                // that returns true\n                cartItems: state.cartItems.filter( cartItem =>\n                    // We compare the cartItem.id to the\n                    // action.payload.id. If the IDs don't match,\n                    // it returns true and those items remain in\n                    // the cart. This causes a new object to be\n                    // returned that contains all the cartItems\n                    // that haven't been removed\n                    cartItem.id !== action.payload.id\n                )\n            };\n       // When the CLEAR_CART action type is dispatched, we\n        // return an object in which we spread in the state\n        // and clear the cart (set the cartItems value back\n        // to an empty array)\n        case CartActionTypes.CLEAR_CART:\n            return {\n                ...state,\n                cartItems: []\n            };\n        default:\n            return state;\n    }\n};\n\nexport default cartReducer;\n"]},"metadata":{},"sourceType":"module"}