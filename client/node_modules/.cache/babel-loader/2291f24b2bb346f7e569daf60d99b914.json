{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux'; // Import persistStore to allow our browser to cache the store\n\nimport { persistStore } from 'redux-persist'; // Import logger, which console logs the input of the\n// actions to help us better understand what is happening\n\nimport logger from 'redux-logger'; // Import thunk to enable reusability of asynchronous actions\n// (to get the shop data from the firestore)\n// No longer needed if we are using saga instead\n// import thunk from 'redux-thunk';\n// Import createSagaMiddleware to enable use of sagas\n\nimport createSagaMiddleware from 'redux-saga'; // Import our root saga\n\nimport rootSaga from './root-saga'; // Import our rootReducer\n\nimport rootReducer from './root-reducer'; // To use sagas, we need to first call the\n// createSagamiddleware function and store it in a variable\n\nconst sagaMiddleware = createSagaMiddleware(); // The middlewares that our store expects from redux is\n// an array with any number of parameters that we want\n// As we only want the logger middleware in our development\n// environment, we set this as a blank array first\n// Once we've installed redux-thunk and imported thunk,\n// we want to push it into our middlewares array. However,\n// we don't need this when using sagas instead\n// When using sagas, we can push the sagaMiddleware variable\n// into the middlewares instead\n\nconst middlewares = [sagaMiddleware]; // If we are in the development environment, we will push\n// the logger middleware into the empty middlewares array\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\n; // We create our store and use the createStore method,\n// which takes two parameters - our rootReducer and also\n// the return value of applyMiddleware, in which we spread\n// in our middlewares (we do it this way to make it more\n// scalable so that we don't have to pass in each\n// individual parameter)\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares)); // Once our saga middleware is called, we need to call it and\n// pass in the root saga that we want to run\n\nsagaMiddleware.run(rootSaga); // We want to create a persistor and pass in our store\n// to enable it to persist in either local or session storage\n\nexport const persistor = persistStore(store); // Finally, we want to export an object that contains\n// our store and the persistor\n\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/workspace/crwn-clothing/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","createSagaMiddleware","rootSaga","rootReducer","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C,C,CACA;;AACA,SAASC,YAAT,QAA6B,eAA7B,C,CACA;AACA;;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,aAArB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;AACA;;AACA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMI,WAAW,GAAG,CAACD,cAAD,CAApB,C,CAEA;AACA;;AACA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBT,MAAjB;AACH;;AAAA,C,CAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMU,KAAK,GAAGb,WAAW,CAACM,WAAD,EAAcL,eAAe,CAAC,GAAGO,WAAJ,CAA7B,CAAzB,C,CAEP;AACA;;AACAD,cAAc,CAACO,GAAf,CAAmBT,QAAnB,E,CAEA;AACA;;AACA,OAAO,MAAMU,SAAS,GAAGb,YAAY,CAACW,KAAD,CAA9B,C,CAEP;AACA;;AACA,eAAe;AAAEA,EAAAA,KAAF;AAASE,EAAAA;AAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\n// Import persistStore to allow our browser to cache the store\nimport { persistStore } from 'redux-persist';\n// Import logger, which console logs the input of the\n// actions to help us better understand what is happening\nimport logger from 'redux-logger';\n// Import thunk to enable reusability of asynchronous actions\n// (to get the shop data from the firestore)\n// No longer needed if we are using saga instead\n// import thunk from 'redux-thunk';\n// Import createSagaMiddleware to enable use of sagas\nimport createSagaMiddleware from 'redux-saga';\n\n// Import our root saga\nimport rootSaga from './root-saga';\n\n// Import our rootReducer\nimport rootReducer from './root-reducer';\n\n// To use sagas, we need to first call the\n// createSagamiddleware function and store it in a variable\nconst sagaMiddleware = createSagaMiddleware();\n\n// The middlewares that our store expects from redux is\n// an array with any number of parameters that we want\n// As we only want the logger middleware in our development\n// environment, we set this as a blank array first\n// Once we've installed redux-thunk and imported thunk,\n// we want to push it into our middlewares array. However,\n// we don't need this when using sagas instead\n// When using sagas, we can push the sagaMiddleware variable\n// into the middlewares instead\nconst middlewares = [sagaMiddleware];\n\n// If we are in the development environment, we will push\n// the logger middleware into the empty middlewares array\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n};\n\n// We create our store and use the createStore method,\n// which takes two parameters - our rootReducer and also\n// the return value of applyMiddleware, in which we spread\n// in our middlewares (we do it this way to make it more\n// scalable so that we don't have to pass in each\n// individual parameter)\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\n// Once our saga middleware is called, we need to call it and\n// pass in the root saga that we want to run\nsagaMiddleware.run(rootSaga);\n\n// We want to create a persistor and pass in our store\n// to enable it to persist in either local or session storage\nexport const persistor = persistStore(store);\n\n// Finally, we want to export an object that contains\n// our store and the persistor\nexport default { store, persistor };\n"]},"metadata":{},"sourceType":"module"}