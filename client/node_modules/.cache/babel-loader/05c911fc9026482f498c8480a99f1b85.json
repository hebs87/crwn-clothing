{"ast":null,"code":"var _jsxFileName = \"/workspace/crwn-clothing/client/src/components/with-spinner/with-spinner.component.jsx\";\nimport React from 'react'; // import styled components\n\nimport { SpinnerContainer, SpinnerOverlay } from './with-spinner.styles'; // We declare our HOC, which is a component that\n// takes some component and returns a new functional\n// component. In this example, WithSpinner component\n// takes a WrappedComponent, which takes a functional\n// component. This component is passed into the other\n// component, which gets the isLoading prop, as well\n// as all the other props that the WrappedComponent\n// gets. That component then renders either the spinner,\n// depending on our isLoading prop, or the\n// WrappedComponent with all the other props\n\nconst WithSpinner = WrappedComponent => {\n  // We create our Spinner component and render the\n  // logic in it\n  const Spinner = ({\n    isLoading,\n    ...otherProps\n  }) => {\n    return isLoading ? React.createElement(SpinnerOverlay, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(SpinnerContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    })) : React.createElement(WrappedComponent, Object.assign({}, otherProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }));\n  }; // We need to return the Spinner component here,\n  // that way if we want to use the spinner, we use\n  // it in the same way as the WrappedComponent,\n  // but we pass it the isLoading prop and declare\n  // the boolean value for the component\n\n\n  return Spinner;\n};\n\nexport default WithSpinner;","map":{"version":3,"sources":["/workspace/crwn-clothing/client/src/components/with-spinner/with-spinner.component.jsx"],"names":["React","SpinnerContainer","SpinnerOverlay","WithSpinner","WrappedComponent","Spinner","isLoading","otherProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SACIC,gBADJ,EAEIC,cAFJ,QAGO,uBAHP,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAGC,gBAAgB,IAAI;AACpC;AACA;AACA,QAAMC,OAAO,GAAG,CAAC;AAAEC,IAAAA,SAAF;AAAa,OAAGC;AAAhB,GAAD,KAAkC;AAC9C,WAAOD,SAAS,GACZ,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADY,GAKZ,oBAAC,gBAAD,oBAAuBC,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OALJ;AAOH,GARD,CAHoC,CAYpC;AACA;AACA;AACA;AACA;;;AACA,SAAOF,OAAP;AACH,CAlBD;;AAoBA,eAAeF,WAAf","sourcesContent":["import React from 'react';\n// import styled components\nimport {\n    SpinnerContainer,\n    SpinnerOverlay\n} from './with-spinner.styles';\n\n// We declare our HOC, which is a component that\n// takes some component and returns a new functional\n// component. In this example, WithSpinner component\n// takes a WrappedComponent, which takes a functional\n// component. This component is passed into the other\n// component, which gets the isLoading prop, as well\n// as all the other props that the WrappedComponent\n// gets. That component then renders either the spinner,\n// depending on our isLoading prop, or the\n// WrappedComponent with all the other props\nconst WithSpinner = WrappedComponent => {\n    // We create our Spinner component and render the\n    // logic in it\n    const Spinner = ({ isLoading, ...otherProps }) => {\n        return isLoading ? (\n            <SpinnerOverlay>\n                <SpinnerContainer />\n            </SpinnerOverlay>\n        ) : (\n            <WrappedComponent { ...otherProps } />\n        )\n    };\n    // We need to return the Spinner component here,\n    // that way if we want to use the spinner, we use\n    // it in the same way as the WrappedComponent,\n    // but we pass it the isLoading prop and declare\n    // the boolean value for the component\n    return Spinner;\n};\n\nexport default WithSpinner;\n"]},"metadata":{},"sourceType":"module"}