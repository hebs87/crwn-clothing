{"ast":null,"code":"// Import the action type so we can set it as the case\nimport UserActionTypes from './user.types'; // ------------Universal Actions------------\n// This call will get the actual current user\n// at the end of it, which will be our payload value\n\nexport const signInSuccess = user => ({\n  type: UserActionTypes.SIGN_IN_SUCCESS,\n  payload: user\n}); // This call will get the error at the end of it,\n// which will be our payload value\n\nexport const signInFailure = error => ({\n  type: UserActionTypes.SIGN_IN_FAILURE,\n  payload: error\n}); // -----------Google Sign In Actions-----------\n// This action is a function that just triggers\n// the actual sign in. It doesn't need a payload,\n// as we are only telling the saga that we need\n// to trigger our sign-in\n\nexport const googleSignInStart = () => ({\n  type: UserActionTypes.GOOGLE_SIGN_IN_START\n}); // ------------Email Sign In Actions------------\n// This action is a function that just triggers\n// the actual sign in. However, the difference\n// between this and the Google one is that we\n// need to get the email and password so that\n// we can verify them in the database. To\n// do this, we get the emailAndPassword and set\n// it as the payload\n\nexport const emailSignInStart = emailAndPassword => ({\n  type: UserActionTypes.EMAIL_SIGN_IN_START,\n  payload: emailAndPassword\n}); // ------------User Persistence Action------------\n\nexport const checkUserSession = () => ({\n  type: UserActionTypes.CHECK_USER_SESSION\n}); // ------------Sign Out Actions------------\n// This action only issues the sign out start action,\n// so there is no payload\n\nexport const signOutStart = () => ({\n  type: UserActionTypes.SIGN_OUT_START\n}); // This action only issues the sign out success action,\n// so there is no payload\n\nexport const signOutSuccess = () => ({\n  type: UserActionTypes.SIGN_OUT_SUCCESS\n}); // This action issues the sign out failure action, but\n// we need to catch the error and set it to the payload\n\nexport const signOutFailure = error => ({\n  type: UserActionTypes.SIGN_OUT_FAILURE,\n  payload: error\n}); // ------------Sign Up Actions------------\n// This action is a function that just triggers\n// the actual sign in. However, we need to get the\n// email, password and displayName, which we will\n// pass all three in as a userCredentials object.\n// We can then add them to the database. To do this, we\n// get the userCredentials and set them as the payload\n\nexport const signUpStart = userCredentials => ({\n  type: UserActionTypes.SIGN_UP_START,\n  payload: userCredentials\n}); // Once we get our SIGN_UP_SUCCESS call, we want to\n// succeed with the user object created from the\n// createUserWithEmailAndPassword method from our\n// firebase utils. To create it in our backend, we\n// also need to run our createUserProfileDocument\n// firebase util, into which we will pass the user\n// details (email and password) and also our displayName\n// Due to this, we will need to get both the user\n// and additinalData (displayName) and set them as\n// a payload object\n\nexport const signUpSuccess = ({\n  user,\n  additinalData\n}) => ({\n  type: UserActionTypes.SIGN_UP_SUCCESS,\n  payload: {\n    user,\n    additinalData\n  }\n}); // This action issues the sign up failure action, but\n// we need to catch the error and set it to the payload\n\nexport const signUpFailure = error => ({\n  type: UserActionTypes.SIGN_UP_FAILURE,\n  payload: error\n});","map":{"version":3,"sources":["/workspace/crwn-clothing/src/redux/user/user.actions.js"],"names":["UserActionTypes","signInSuccess","user","type","SIGN_IN_SUCCESS","payload","signInFailure","error","SIGN_IN_FAILURE","googleSignInStart","GOOGLE_SIGN_IN_START","emailSignInStart","emailAndPassword","EMAIL_SIGN_IN_START","checkUserSession","CHECK_USER_SESSION","signOutStart","SIGN_OUT_START","signOutSuccess","SIGN_OUT_SUCCESS","signOutFailure","SIGN_OUT_FAILURE","signUpStart","userCredentials","SIGN_UP_START","signUpSuccess","additinalData","SIGN_UP_SUCCESS","signUpFailure","SIGN_UP_FAILURE"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,cAA5B,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGC,IAAI,KAAK;AAClCC,EAAAA,IAAI,EAAEH,eAAe,CAACI,eADY;AAElCC,EAAAA,OAAO,EAAEH;AAFyB,CAAL,CAA1B,C,CAKP;AACA;;AACA,OAAO,MAAMI,aAAa,GAAGC,KAAK,KAAK;AACnCJ,EAAAA,IAAI,EAAEH,eAAe,CAACQ,eADa;AAEnCH,EAAAA,OAAO,EAAEE;AAF0B,CAAL,CAA3B,C,CAKP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,iBAAiB,GAAG,OAAO;AACpCN,EAAAA,IAAI,EAAEH,eAAe,CAACU;AADc,CAAP,CAA1B,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGC,gBAAgB,KAAK;AACjDT,EAAAA,IAAI,EAAEH,eAAe,CAACa,mBAD2B;AAEjDR,EAAAA,OAAO,EAAEO;AAFwC,CAAL,CAAzC,C,CAKP;;AACA,OAAO,MAAME,gBAAgB,GAAG,OAAO;AACnCX,EAAAA,IAAI,EAAEH,eAAe,CAACe;AADa,CAAP,CAAzB,C,CAIP;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,OAAO;AAC/Bb,EAAAA,IAAI,EAAEH,eAAe,CAACiB;AADS,CAAP,CAArB,C,CAIP;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,OAAO;AACjCf,EAAAA,IAAI,EAAEH,eAAe,CAACmB;AADW,CAAP,CAAvB,C,CAIP;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGb,KAAK,KAAK;AACpCJ,EAAAA,IAAI,EAAEH,eAAe,CAACqB,gBADc;AAEpChB,EAAAA,OAAO,EAAEE;AAF2B,CAAL,CAA5B,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMe,WAAW,GAAGC,eAAe,KAAK;AAC3CpB,EAAAA,IAAI,EAAEH,eAAe,CAACwB,aADqB;AAE3CnB,EAAAA,OAAO,EAAEkB;AAFkC,CAAL,CAAnC,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,aAAa,GAAG,CAAC;AAAEvB,EAAAA,IAAF;AAAQwB,EAAAA;AAAR,CAAD,MAA8B;AACvDvB,EAAAA,IAAI,EAAEH,eAAe,CAAC2B,eADiC;AAEvDtB,EAAAA,OAAO,EAAE;AAAEH,IAAAA,IAAF;AAAQwB,IAAAA;AAAR;AAF8C,CAA9B,CAAtB,C,CAKP;AACA;;AACA,OAAO,MAAME,aAAa,GAAGrB,KAAK,KAAK;AACnCJ,EAAAA,IAAI,EAAEH,eAAe,CAAC6B,eADa;AAEnCxB,EAAAA,OAAO,EAAEE;AAF0B,CAAL,CAA3B","sourcesContent":["// Import the action type so we can set it as the case\nimport UserActionTypes from './user.types';\n\n// ------------Universal Actions------------\n// This call will get the actual current user\n// at the end of it, which will be our payload value\nexport const signInSuccess = user => ({\n    type: UserActionTypes.SIGN_IN_SUCCESS,\n    payload: user\n});\n\n// This call will get the error at the end of it,\n// which will be our payload value\nexport const signInFailure = error => ({\n    type: UserActionTypes.SIGN_IN_FAILURE,\n    payload: error\n});\n\n// -----------Google Sign In Actions-----------\n// This action is a function that just triggers\n// the actual sign in. It doesn't need a payload,\n// as we are only telling the saga that we need\n// to trigger our sign-in\nexport const googleSignInStart = () => ({\n    type: UserActionTypes.GOOGLE_SIGN_IN_START\n});\n\n// ------------Email Sign In Actions------------\n// This action is a function that just triggers\n// the actual sign in. However, the difference\n// between this and the Google one is that we\n// need to get the email and password so that\n// we can verify them in the database. To\n// do this, we get the emailAndPassword and set\n// it as the payload\nexport const emailSignInStart = emailAndPassword => ({\n    type: UserActionTypes.EMAIL_SIGN_IN_START,\n    payload: emailAndPassword\n});\n\n// ------------User Persistence Action------------\nexport const checkUserSession = () => ({\n    type: UserActionTypes.CHECK_USER_SESSION\n});\n\n// ------------Sign Out Actions------------\n// This action only issues the sign out start action,\n// so there is no payload\nexport const signOutStart = () => ({\n    type: UserActionTypes.SIGN_OUT_START\n});\n\n// This action only issues the sign out success action,\n// so there is no payload\nexport const signOutSuccess = () => ({\n    type: UserActionTypes.SIGN_OUT_SUCCESS\n});\n\n// This action issues the sign out failure action, but\n// we need to catch the error and set it to the payload\nexport const signOutFailure = error => ({\n    type: UserActionTypes.SIGN_OUT_FAILURE,\n    payload: error\n});\n\n// ------------Sign Up Actions------------\n// This action is a function that just triggers\n// the actual sign in. However, we need to get the\n// email, password and displayName, which we will\n// pass all three in as a userCredentials object.\n// We can then add them to the database. To do this, we\n// get the userCredentials and set them as the payload\nexport const signUpStart = userCredentials => ({\n    type: UserActionTypes.SIGN_UP_START,\n    payload: userCredentials\n});\n\n// Once we get our SIGN_UP_SUCCESS call, we want to\n// succeed with the user object created from the\n// createUserWithEmailAndPassword method from our\n// firebase utils. To create it in our backend, we\n// also need to run our createUserProfileDocument\n// firebase util, into which we will pass the user\n// details (email and password) and also our displayName\n// Due to this, we will need to get both the user\n// and additinalData (displayName) and set them as\n// a payload object\nexport const signUpSuccess = ({ user, additinalData }) => ({\n    type: UserActionTypes.SIGN_UP_SUCCESS,\n    payload: { user, additinalData }\n});\n\n// This action issues the sign up failure action, but\n// we need to catch the error and set it to the payload\nexport const signUpFailure = error => ({\n    type: UserActionTypes.SIGN_UP_FAILURE,\n    payload: error\n});\n"]},"metadata":{},"sourceType":"module"}