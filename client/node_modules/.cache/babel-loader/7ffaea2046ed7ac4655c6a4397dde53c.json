{"ast":null,"code":"import ShopActionTypes from './shop.types'; // Import convertCollectionSnapshotToMap and firestore to enable\n// pulling data from the firestore database\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'; // This is our fetchCollectionsStart action,\n// which just returns our type, but no payload,\n// because all it does is switch our reducer's\n// isFetching state to true\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n}); // This is our success call, which fires once we\n// have successfully got the data from our firestore\n// This is where we get our collectionsMap and set\n// it as our payload\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n}); // This is our error call, which fires if we get an\n// error when fetching the data\n\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); // Instead of writing a function that returns an\n// action, we are now writing a function that returns\n// a function that gets dispatch in it, so that\n// whenever dispatch is called, it will fire multiple\n// actions\n// This is going to be the actual function that we\n// pass into our components to begin the fetching\n// process.\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    // We want to call the firestore.collection and pass\n    // in the name of our collection. This gets the\n    // 'collections' collection from firebase and stores\n    // it in the collectionRef const\n    const collectionRef = firestore.collection('collections'); // We also want to dispatch our fetchCollectionsStart\n    // function as soon as this function gets called - this\n    // switched our reducer's isFetching state to true\n\n    dispatch(fetchCollectionsStart()); // Now we want to get the data from it, so we need to\n    // use the get() method. This ensures that when\n    // the component runs for the first time or re-renders,\n    // we get the data that is running. We then use the then()\n    // method, which asynchronously gets the snapshot as the\n    // prop and then pass it into the\n    // convertCollectionSnapshotToMap function and store\n    // in a collectionsMap const.\n    // We then want to call our updateCollections action\n    // and pass the collectionsMap into it\n    // After creating our WithSpinner HOC, we also want\n    // to set the loading state to false once all the\n    // data is loaded\n\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot); // We dispatch our fetchCollectionsSuccess function\n      // and pass in the collectionsMap, so that it\n      // is set as the payload\n\n      dispatch(fetchCollectionsSuccess(collectionsMap)); // We then have a catch handler to get our error message,\n      // and we use the dispatch to dispatch the error.message\n      // into the fetchCollectionsFailure action\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["/workspace/crwn-clothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B,C,CACA;AACA;;AACA,SACIC,SADJ,EAEIC,+BAFJ,QAGO,+BAHP,C,CAKA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADkB,CAAP,CAA9B,C,CAIP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACtDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADgC;AAEtDC,EAAAA,OAAO,EAAEF;AAF6C,CAAL,CAA9C,C,CAKP;AACA;;AACA,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACpDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBAD8B;AAEpDH,EAAAA,OAAO,EAAEE;AAF2C,CAAL,CAA5C,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACf;AACA;AACA;AACA;AACA,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CALe,CAMf;AACA;AACA;;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR,CATe,CAUf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAY,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,YAAMZ,cAAc,GAAGL,+BAA+B,CAACiB,QAAD,CAAtD,CADiC,CAEjC;AACA;AACA;;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR,CALiC,CAMjC;AACA;AACA;AACH,KATD,EASGa,KATH,CASSC,KAAK,IAAIP,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAT1B;AAUH,GAjCD;AAkCH,CAnCM","sourcesContent":["import ShopActionTypes from './shop.types';\n// Import convertCollectionSnapshotToMap and firestore to enable\n// pulling data from the firestore database\nimport {\n    firestore,\n    convertCollectionsSnapshotToMap\n} from '../../firebase/firebase.utils';\n\n// This is our fetchCollectionsStart action,\n// which just returns our type, but no payload,\n// because all it does is switch our reducer's\n// isFetching state to true\nexport const fetchCollectionsStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_START,\n});\n\n// This is our success call, which fires once we\n// have successfully got the data from our firestore\n// This is where we get our collectionsMap and set\n// it as our payload\nexport const fetchCollectionsSuccess = collectionsMap => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n});\n\n// This is our error call, which fires if we get an\n// error when fetching the data\nexport const fetchCollectionsFailure = errorMessage => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n});\n\n// Instead of writing a function that returns an\n// action, we are now writing a function that returns\n// a function that gets dispatch in it, so that\n// whenever dispatch is called, it will fire multiple\n// actions\n// This is going to be the actual function that we\n// pass into our components to begin the fetching\n// process.\nexport const fetchCollectionsStartAsync = () => {\n    return dispatch => {\n        // We want to call the firestore.collection and pass\n        // in the name of our collection. This gets the\n        // 'collections' collection from firebase and stores\n        // it in the collectionRef const\n        const collectionRef = firestore.collection('collections');\n        // We also want to dispatch our fetchCollectionsStart\n        // function as soon as this function gets called - this\n        // switched our reducer's isFetching state to true\n        dispatch(fetchCollectionsStart());\n        // Now we want to get the data from it, so we need to\n        // use the get() method. This ensures that when\n        // the component runs for the first time or re-renders,\n        // we get the data that is running. We then use the then()\n        // method, which asynchronously gets the snapshot as the\n        // prop and then pass it into the\n        // convertCollectionSnapshotToMap function and store\n        // in a collectionsMap const.\n        // We then want to call our updateCollections action\n        // and pass the collectionsMap into it\n        // After creating our WithSpinner HOC, we also want\n        // to set the loading state to false once all the\n        // data is loaded\n        collectionRef.get().then(snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            // We dispatch our fetchCollectionsSuccess function\n            // and pass in the collectionsMap, so that it\n            // is set as the payload\n            dispatch(fetchCollectionsSuccess(collectionsMap));\n            // We then have a catch handler to get our error message,\n            // and we use the dispatch to dispatch the error.message\n            // into the fetchCollectionsFailure action\n        }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}