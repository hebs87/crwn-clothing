{"ast":null,"code":"// createSelector enables us to create output selectors\nimport { createSelector } from 'reselect'; // ALL SELECTOR NAMES HAVE TO STATE WITH 'select'\n// Input selector - only takes one argument - the whole\n// state and then just returns a slice of it\n// Here, we pass in the root reducer, so the whole state,\n// and then just return the cart section of it\n\nconst selectCart = state => state.cart; // Output selectors - use the createSelector method from\n// reselect and take the selectors and then another\n// function that returns a drilled down piece of the\n// state and create memoized functions\n\n\nexport const selectCartItems = createSelector( // 1st argument is an array/collection of selectors\n[selectCart], // 2nd argument is a function that returns the value\n// we want from the function\n// Here, we want the cart part of the state and then the\n// cartItems property from it\ncart => cart.cartItems); // Gets the hidden value from the cart reducer to\n// enable toggling\n\nexport const selectCartHidden = createSelector([selectCart], cart => cart.hidden);\nexport const selectCartItemsCount = createSelector( // We can pass in other output selectors here\n[selectCartItems], // We want to use the reduce call on the cartItems\n// from the previous function to calculate the count\ncartItems => // We use the reduce function to loop over each\n// of the items in our cartItems object and add\n// them up.\n// The reduce() takes an accumulator and item as\n// its arguments and the number/value in the\n// function specifies the initial value of the\n// accumulator. Here, the initial value of the\n// accumulator is 0, which gets added to the\n// item quantity, then for the next iteration the\n// accumulator value is the new total, and so on\n// until all items are looped over and added\ncartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity, 0));\nexport const selectCartTotal = createSelector([selectCartItems], cartItems => cartItems.reduce((accumulatedQuantity, cartItem) => // We calculate the total price\naccumulatedQuantity + cartItem.quantity * cartItem.price, 0));","map":{"version":3,"sources":["/workspace/crwn-clothing/client/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartHidden","hidden","selectCartItemsCount","reduce","accumulatedQuantity","cartItem","quantity","selectCartTotal","price"],"mappings":"AAAA;AACA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;AAEA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC,C,CAEA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,eAAe,GAAGJ,cAAc,EACzC;AACA,CAACC,UAAD,CAFyC,EAGzC;AACA;AACA;AACA;AACAE,IAAI,IAAIA,IAAI,CAACE,SAP4B,CAAtC,C,CAUP;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGN,cAAc,CAC1C,CAACC,UAAD,CAD0C,EAE1CE,IAAI,IAAIA,IAAI,CAACI,MAF6B,CAAvC;AAKP,OAAO,MAAMC,oBAAoB,GAAGR,cAAc,EAC9C;AACA,CAACI,eAAD,CAF8C,EAG9C;AACA;AACAC,SAAS,IACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACI,MAAV,CACI,CAACC,mBAAD,EAAsBC,QAAtB,KACID,mBAAmB,GAAGC,QAAQ,CAACC,QAFvC,EAEiD,CAFjD,CAjB0C,CAA3C;AAuBP,OAAO,MAAMC,eAAe,GAAGb,cAAc,CACzC,CAACI,eAAD,CADyC,EAEzCC,SAAS,IACLA,SAAS,CAACI,MAAV,CACI,CAACC,mBAAD,EAAsBC,QAAtB,KACI;AACAD,mBAAmB,GAAGC,QAAQ,CAACC,QAAT,GAAoBD,QAAQ,CAACG,KAH3D,EAGkE,CAHlE,CAHqC,CAAtC","sourcesContent":["// createSelector enables us to create output selectors\nimport { createSelector } from 'reselect';\n\n// ALL SELECTOR NAMES HAVE TO STATE WITH 'select'\n\n// Input selector - only takes one argument - the whole\n// state and then just returns a slice of it\n// Here, we pass in the root reducer, so the whole state,\n// and then just return the cart section of it\nconst selectCart = state => state.cart;\n\n// Output selectors - use the createSelector method from\n// reselect and take the selectors and then another\n// function that returns a drilled down piece of the\n// state and create memoized functions\nexport const selectCartItems = createSelector(\n    // 1st argument is an array/collection of selectors\n    [selectCart],\n    // 2nd argument is a function that returns the value\n    // we want from the function\n    // Here, we want the cart part of the state and then the\n    // cartItems property from it\n    cart => cart.cartItems\n);\n\n// Gets the hidden value from the cart reducer to\n// enable toggling\nexport const selectCartHidden = createSelector(\n    [selectCart],\n    cart => cart.hidden\n);\n\nexport const selectCartItemsCount = createSelector(\n    // We can pass in other output selectors here\n    [selectCartItems],\n    // We want to use the reduce call on the cartItems\n    // from the previous function to calculate the count\n    cartItems =>\n        // We use the reduce function to loop over each\n        // of the items in our cartItems object and add\n        // them up.\n        // The reduce() takes an accumulator and item as\n        // its arguments and the number/value in the\n        // function specifies the initial value of the\n        // accumulator. Here, the initial value of the\n        // accumulator is 0, which gets added to the\n        // item quantity, then for the next iteration the\n        // accumulator value is the new total, and so on\n        // until all items are looped over and added\n        cartItems.reduce(\n            (accumulatedQuantity, cartItem) =>\n                accumulatedQuantity + cartItem.quantity, 0\n        )\n);\n\nexport const selectCartTotal = createSelector(\n    [selectCartItems],\n    cartItems =>\n        cartItems.reduce(\n            (accumulatedQuantity, cartItem) =>\n                // We calculate the total price\n                accumulatedQuantity + cartItem.quantity * cartItem.price, 0\n        )\n);\n"]},"metadata":{},"sourceType":"module"}