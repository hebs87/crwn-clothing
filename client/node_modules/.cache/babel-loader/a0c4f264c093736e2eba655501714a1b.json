{"ast":null,"code":"// Import the action type so we can set it as the case\nimport UserActionTypes from './user.types'; // ------------Universal Actions------------\n// This call will get the actual current user\n// at the end of it, which will be our payload value\n\nexport const signInSuccess = user => ({\n  type: UserActionTypes.SIGN_IN_SUCCESS,\n  payload: user\n}); // This call will get the error at the end of it,\n// which will be our payload value\n\nexport const signInFailure = error => ({\n  type: UserActionTypes.SIGN_IN_FAILURE,\n  payload: error\n}); // -----------Google Sign In Actions-----------\n// This action is a function that just triggers\n// the actual sign in. It doesn't need a payload,\n// as we are only telling the saga that we need\n// to trigger our sign-in\n\nexport const googleSignInStart = () => ({\n  type: UserActionTypes.GOOGLE_SIGN_IN_START\n}); // ------------Email Sign In Actions------------\n// This action is a function that just triggers\n// the actual sign in. However, the difference\n// between this and the Google one is that we\n// need to get the email and password so that\n// we can verify or add it to the database. To\n// do this, we get the emailAndPassword and set\n// it as the payload\n\nexport const emailSignInStart = emailAndPassword => ({\n  type: UserActionTypes.EMAIL_SIGN_IN_START,\n  payload: emailAndPassword\n}); // ------------User Persistence Action------------\n\nexport const checkUserSession = () => ({\n  type: UserActionTypes.CHECK_USER_SESSION\n}); // ------------Sign Out Actions------------\n// This action only issues the sign out start action,\n// so there is no payload\n// This action only issues the sign out success action,\n// so there is no payload\n// This action issues the sign out failure action, but\n// we need to catch the error and set it to the payload","map":{"version":3,"sources":["/workspace/crwn-clothing/src/redux/user/user.actions.js"],"names":["UserActionTypes","signInSuccess","user","type","SIGN_IN_SUCCESS","payload","signInFailure","error","SIGN_IN_FAILURE","googleSignInStart","GOOGLE_SIGN_IN_START","emailSignInStart","emailAndPassword","EMAIL_SIGN_IN_START","checkUserSession","CHECK_USER_SESSION"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,cAA5B,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGC,IAAI,KAAK;AAClCC,EAAAA,IAAI,EAAEH,eAAe,CAACI,eADY;AAElCC,EAAAA,OAAO,EAAEH;AAFyB,CAAL,CAA1B,C,CAKP;AACA;;AACA,OAAO,MAAMI,aAAa,GAAGC,KAAK,KAAK;AACnCJ,EAAAA,IAAI,EAAEH,eAAe,CAACQ,eADa;AAEnCH,EAAAA,OAAO,EAAEE;AAF0B,CAAL,CAA3B,C,CAKP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,iBAAiB,GAAG,OAAO;AACpCN,EAAAA,IAAI,EAAEH,eAAe,CAACU;AADc,CAAP,CAA1B,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGC,gBAAgB,KAAK;AACjDT,EAAAA,IAAI,EAAEH,eAAe,CAACa,mBAD2B;AAEjDR,EAAAA,OAAO,EAAEO;AAFwC,CAAL,CAAzC,C,CAKP;;AACA,OAAO,MAAME,gBAAgB,GAAG,OAAO;AACnCX,EAAAA,IAAI,EAAEH,eAAe,CAACe;AADa,CAAP,CAAzB,C,CAIP;AACA;AACA;AAGA;AACA;AAGA;AACA","sourcesContent":["// Import the action type so we can set it as the case\nimport UserActionTypes from './user.types';\n\n// ------------Universal Actions------------\n// This call will get the actual current user\n// at the end of it, which will be our payload value\nexport const signInSuccess = user => ({\n    type: UserActionTypes.SIGN_IN_SUCCESS,\n    payload: user\n});\n\n// This call will get the error at the end of it,\n// which will be our payload value\nexport const signInFailure = error => ({\n    type: UserActionTypes.SIGN_IN_FAILURE,\n    payload: error\n});\n\n// -----------Google Sign In Actions-----------\n// This action is a function that just triggers\n// the actual sign in. It doesn't need a payload,\n// as we are only telling the saga that we need\n// to trigger our sign-in\nexport const googleSignInStart = () => ({\n    type: UserActionTypes.GOOGLE_SIGN_IN_START\n});\n\n// ------------Email Sign In Actions------------\n// This action is a function that just triggers\n// the actual sign in. However, the difference\n// between this and the Google one is that we\n// need to get the email and password so that\n// we can verify or add it to the database. To\n// do this, we get the emailAndPassword and set\n// it as the payload\nexport const emailSignInStart = emailAndPassword => ({\n    type: UserActionTypes.EMAIL_SIGN_IN_START,\n    payload: emailAndPassword\n});\n\n// ------------User Persistence Action------------\nexport const checkUserSession = () => ({\n    type: UserActionTypes.CHECK_USER_SESSION\n});\n\n// ------------Sign Out Actions------------\n// This action only issues the sign out start action,\n// so there is no payload\n\n\n// This action only issues the sign out success action,\n// so there is no payload\n\n\n// This action issues the sign out failure action, but\n// we need to catch the error and set it to the payload"]},"metadata":{},"sourceType":"module"}