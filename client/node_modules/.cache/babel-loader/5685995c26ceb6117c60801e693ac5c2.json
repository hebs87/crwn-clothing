{"ast":null,"code":"// Import css to allow us to create reusable\n// style snippets that share the same styles\nimport styled, { css } from 'styled-components'; // We want to call the css library to make a\n// reusable CSS styles snippet that can be used\n// by the relevant components - this avoids us \n// repeating our CSS styles in two different\n// components that share the same styles\n// Create our buttonStyles - the styles used that\n// conflict with the invertedButtonStyles\n\nconst buttonStyles = css`\n  background-color: black;\n  color: white;\n  border: none;\n  \n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`; // Create our invertedButtonStyles\n\nconst invertedButtonStyles = css`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }\n`; // Create our googleSignInStyles\n\nconst googleSignInStyles = css`\n  background-color: #4285f4;\n  color: white;\n  border: none;\n\n  &:hover {\n    background-color: #357ae8;\n  }\n`; // We create a function that uses the googleSignInStyles\n// if the isGoogleSignIn prop/class is present in the\n// button; the invertedButtonStyles if the inverted prop/\n// class is present, or the buttonStyles if neither is\n// present\n\nconst getButtonStyles = props => {\n  if (props.isGoogleSignIn) {\n    return googleSignInStyles;\n  }\n\n  ;\n  return props.inverted ? invertedButtonStyles : buttonStyles;\n}; // Create our base CustomButtonContainer\n// We call the getButtonStyles function in it,\n// which ensures the correct CSS style snippet\n// is called, depending on the props/class that\n// are passed in\n\n\nexport const CustomButtonContainer = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  text-transform: uppercase;\n  font-family: 'Open Sans Condensed';\n  font-weight: bolder;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n\n  ${getButtonStyles}\n`;","map":{"version":3,"sources":["/workspace/crwn-clothing/src/components/custom-button/custom-button.styles.jsx"],"names":["styled","css","buttonStyles","invertedButtonStyles","googleSignInStyles","getButtonStyles","props","isGoogleSignIn","inverted","CustomButtonContainer","button"],"mappings":"AAAA;AACA;AACA,OAAOA,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,MAAMC,YAAY,GAAGD,GAAI;;;;;;;;;;CAAzB,C,CAYA;;AACA,MAAME,oBAAoB,GAAGF,GAAI;;;;;;;;;;CAAjC,C,CAYA;;AACA,MAAMG,kBAAkB,GAAGH,GAAI;;;;;;;;CAA/B,C,CAUA;AACA;AACA;AACA;AACA;;AACA,MAAMI,eAAe,GAAGC,KAAK,IAAI;AAC7B,MAAIA,KAAK,CAACC,cAAV,EAA0B;AACtB,WAAOH,kBAAP;AACH;;AAAA;AAED,SAAOE,KAAK,CAACE,QAAN,GAAiBL,oBAAjB,GAAwCD,YAA/C;AACH,CAND,C,CAQA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMO,qBAAqB,GAAGT,MAAM,CAACU,MAAO;;;;;;;;;;;;;;;IAe9CL,eAAiB;CAff","sourcesContent":["// Import css to allow us to create reusable\n// style snippets that share the same styles\nimport styled, { css } from 'styled-components';\n\n// We want to call the css library to make a\n// reusable CSS styles snippet that can be used\n// by the relevant components - this avoids us \n// repeating our CSS styles in two different\n// components that share the same styles\n\n// Create our buttonStyles - the styles used that\n// conflict with the invertedButtonStyles\nconst buttonStyles = css`\n  background-color: black;\n  color: white;\n  border: none;\n  \n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`;\n\n// Create our invertedButtonStyles\nconst invertedButtonStyles = css`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }\n`;\n\n// Create our googleSignInStyles\nconst googleSignInStyles = css`\n  background-color: #4285f4;\n  color: white;\n  border: none;\n\n  &:hover {\n    background-color: #357ae8;\n  }\n`;\n\n// We create a function that uses the googleSignInStyles\n// if the isGoogleSignIn prop/class is present in the\n// button; the invertedButtonStyles if the inverted prop/\n// class is present, or the buttonStyles if neither is\n// present\nconst getButtonStyles = props => {\n    if (props.isGoogleSignIn) {\n        return googleSignInStyles;\n    };\n\n    return props.inverted ? invertedButtonStyles : buttonStyles;\n}\n\n// Create our base CustomButtonContainer\n// We call the getButtonStyles function in it,\n// which ensures the correct CSS style snippet\n// is called, depending on the props/class that\n// are passed in\nexport const CustomButtonContainer = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  text-transform: uppercase;\n  font-family: 'Open Sans Condensed';\n  font-weight: bolder;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n\n  ${ getButtonStyles }\n`;\n"]},"metadata":{},"sourceType":"module"}