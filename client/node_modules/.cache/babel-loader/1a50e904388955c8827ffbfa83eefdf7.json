{"ast":null,"code":"// Import types\nimport ShopActionTypes from './shop.types'; // Create INITIAL_STATE\n\nconst INITIAL_STATE = {\n  collections: null,\n  // When we are at the stage of moving our\n  // data fetch call from the Shop component\n  // into our reducer instead, we want to have\n  // an isFetching state, which declares whether\n  // we are fetching our data or not. The initial\n  // state of this property will be false. This\n  // allows us to move the loading state into our\n  // reducer too, so that we can load the spinner\n  isFetching: false,\n  // We also want to set our initial errorMessage\n  // state so that we can pass in the error message\n  // details if we the fetch call fails\n  errorMessage: undefined\n}; // Create reducer\n\nconst shopReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    // MODIFIED WHEN MOVING DATA FETCH CALL OUT OF\n    // SHOP COMONENT INTO REDUCER\n    // This is when our fetch collection starts,\n    // which just changes the isFetching state to true\n    case ShopActionTypes.FETCH_COLLECTIONS_START:\n      return { ...state,\n        isFetching: true\n      };\n    // This is when our fetch collection completes\n    // successfully - it returns an object with the\n    // state and the action payload which will be\n    // the shop data from our firestore. It also\n    // resets our isFetching value to false again\n\n    case ShopActionTypes.FETCH_COLLECTIONS_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        collections: action.payload\n      };\n    // This is when our fetch collection fails - it\n    // returns an object with the state and sets the\n    // errorMessage prop to the action payload which\n    // will be the error message string. It also\n    // resets our isFetching value to false again\n\n    case ShopActionTypes.FETCH_COLLECTIONS_FAILURE:\n      return { ...state,\n        isFetching: false,\n        errorMessage: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default shopReducer;","map":{"version":3,"sources":["/workspace/crwn-clothing/src/redux/shop/shop.reducer.js"],"names":["ShopActionTypes","INITIAL_STATE","collections","isFetching","errorMessage","undefined","shopReducer","state","action","type","FETCH_COLLECTIONS_START","FETCH_COLLECTIONS_SUCCESS","payload","FETCH_COLLECTIONS_FAILURE"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,cAA5B,C,CAEA;;AACA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,WAAW,EAAE,IADK;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,UAAU,EAAE,KAVM;AAWlB;AACA;AACA;AACAC,EAAAA,YAAY,EAAEC;AAdI,CAAtB,C,CAiBA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,aAAT,EAAwBO,MAAxB,KAAmC;AACnD,UAAOA,MAAM,CAACC,IAAd;AACI;AACA;AACA;AACA;AACA,SAAKT,eAAe,CAACU,uBAArB;AACI,aAAO,EACH,GAAGH,KADA;AAEHJ,QAAAA,UAAU,EAAE;AAFT,OAAP;AAIJ;AACA;AACA;AACA;AACA;;AACA,SAAKH,eAAe,CAACW,yBAArB;AACI,aAAO,EACH,GAAGJ,KADA;AAEHJ,QAAAA,UAAU,EAAE,KAFT;AAGHD,QAAAA,WAAW,EAAEM,MAAM,CAACI;AAHjB,OAAP;AAKJ;AACA;AACA;AACA;AACA;;AACA,SAAKZ,eAAe,CAACa,yBAArB;AACI,aAAO,EACH,GAAGN,KADA;AAEHJ,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,YAAY,EAAEI,MAAM,CAACI;AAHlB,OAAP;;AAKJ;AACI,aAAOL,KAAP;AAjCR;AAmCH,CApCD;;AAsCA,eAAeD,WAAf","sourcesContent":["// Import types\nimport ShopActionTypes from './shop.types';\n\n// Create INITIAL_STATE\nconst INITIAL_STATE = {\n    collections: null,\n    // When we are at the stage of moving our\n    // data fetch call from the Shop component\n    // into our reducer instead, we want to have\n    // an isFetching state, which declares whether\n    // we are fetching our data or not. The initial\n    // state of this property will be false. This\n    // allows us to move the loading state into our\n    // reducer too, so that we can load the spinner\n    isFetching: false,\n    // We also want to set our initial errorMessage\n    // state so that we can pass in the error message\n    // details if we the fetch call fails\n    errorMessage: undefined\n};\n\n// Create reducer\nconst shopReducer = (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n        // MODIFIED WHEN MOVING DATA FETCH CALL OUT OF\n        // SHOP COMONENT INTO REDUCER\n        // This is when our fetch collection starts,\n        // which just changes the isFetching state to true\n        case ShopActionTypes.FETCH_COLLECTIONS_START:\n            return {\n                ...state,\n                isFetching: true\n            }\n        // This is when our fetch collection completes\n        // successfully - it returns an object with the\n        // state and the action payload which will be\n        // the shop data from our firestore. It also\n        // resets our isFetching value to false again\n        case ShopActionTypes.FETCH_COLLECTIONS_SUCCESS:\n            return {\n                ...state,\n                isFetching: false,\n                collections: action.payload\n            };\n        // This is when our fetch collection fails - it\n        // returns an object with the state and sets the\n        // errorMessage prop to the action payload which\n        // will be the error message string. It also\n        // resets our isFetching value to false again\n        case ShopActionTypes.FETCH_COLLECTIONS_FAILURE:\n            return {\n                ...state,\n                isFetching: false,\n                errorMessage: action.payload\n            }\n        default:\n            return state\n    }\n};\n\nexport default shopReducer;\n"]},"metadata":{},"sourceType":"module"}