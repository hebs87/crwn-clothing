{"ast":null,"code":"var _jsxFileName = \"/workspace/crwn-clothing/src/App.js\";\nimport React from 'react'; // Import Switch and Route to enable routing\n\nimport { Switch, Route, Redirect } from 'react-router-dom'; // Import connect to enable the app to access redux\n\nimport { connect } from 'react-redux'; // Import createStructured selector to allow multiple selector calls\n\nimport { createStructuredSelector } from 'reselect';\nimport './App.css'; // Import HomePage Component\n\nimport HomePage from './pages/homepage/homepage.component'; // Import ShopPage Component\n\nimport ShopPage from './pages/shop/shop.component'; // Import SignInAndSignUp Component\n\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component'; // Import CheckoutPage component\n\nimport CheckoutPage from './pages/checkout/checkout.component'; // Import Header Component\n\nimport Header from './components/header/header.component'; // Import auth from firebase utiils\n\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils'; // Import setCurrentUser action to enable us to set currentUser\n\nimport { setCurrentUser } from './redux/user/user.actions'; // Import selectors to pass into mapStateToProps\n\nimport { selectCurrentUser } from './redux/user/user.selectors';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    // Destructure setCurrentUser from our props\n    const {\n      setCurrentUser\n    } = this.props; // The onAuthStateChanged is a method from our auth library\n    // that enables us to set the session state to the user details\n    // It takes an async function in which we set the\n    // createUserProfileDocument param to the user object, if the\n    // userAuth exists\n\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth); // Here, we call the onSnapshot method to get a snapshot\n        // of the user's data and we set the currentUser value to\n        // those details (user's ID and rest of the snapshot data)\n\n        userRef.onSnapshot(snapShot => {\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()\n          });\n        });\n      } else {\n        // If the user logs out, we set the currentUser value\n        // back to null\n        setCurrentUser(userAuth);\n      }\n    });\n  } // We close the session when the component unmounts\n\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/checkout\",\n      component: CheckoutPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => this.props.currentUser ? React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }) : React.createElement(SignInAndSignUp, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })));\n  }\n\n} // FOR REDIRECTING THE USER TO HOME PAGE IF SIGNED IN\n// We want to get our redux user state\n\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n}); // The mapDispatchToProps function takes the dispatch property\n// and returns an object where the prop name will be whatever\n// prop we want to pass in that dispatches the new action that\n// we want to pass, which in this instance is setCurrentUser\n\nconst mapDispatchToProps = dispatch => ({\n  // setCurrentUser is the prop, but it goes to a function\n  // that gets the user object and then calls dispatch\n  // dispatch lets redux know that whatever object it is\n  // being passed is an action object that it needs to\n  // pass to every reducer\n  // So here, we call the setCurrentUser action and pass\n  // in the user that will be used as the payload\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/workspace/crwn-clothing/src/App.js"],"names":["React","Switch","Route","Redirect","connect","createStructuredSelector","HomePage","ShopPage","SignInAndSignUp","CheckoutPage","Header","auth","createUserProfileDocument","setCurrentUser","selectCurrentUser","App","Component","unsubscribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","componentWillUnmount","render","currentUser","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,OAAO,WAAP,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,qCAArB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,6BAArB,C,CACA;;AACA,OAAOC,eAAP,MAA4B,2DAA5B,C,CACA;;AACA,OAAOC,YAAP,MAAyB,qCAAzB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,sCAAnB,C,CACA;;AACA,SAASC,IAAT,EAAeC,yBAAf,QAAgD,2BAAhD,C,CACA;;AACA,SAASC,cAAT,QAA+B,2BAA/B,C,CACA;;AACA,SAASC,iBAAT,QAAkC,6BAAlC;;AAEA,MAAMC,GAAN,SAAkBf,KAAK,CAACgB,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAG9BC,mBAH8B,GAGR,IAHQ;AAAA;;AAK9BC,EAAAA,iBAAiB,GAAG;AAChB;AACA,UAAM;AAACL,MAAAA;AAAD,QAAmB,KAAKM,KAA9B,CAFgB,CAGhB;AACA;AACA;AACA;AACA;;AACA,SAAKF,mBAAL,GAA2BN,IAAI,CAACS,kBAAL,CAAwB,MAAMC,QAAN,IAAkB;AACjE,UAAIA,QAAJ,EAAc;AACV,cAAMC,OAAO,GAAG,MAAMV,yBAAyB,CAACS,QAAD,CAA/C,CADU,CAGV;AACA;AACA;;AACAC,QAAAA,OAAO,CAACC,UAAR,CAAmBC,QAAQ,IAAI;AAC3BX,UAAAA,cAAc,CAAC;AACPY,YAAAA,EAAE,EAAED,QAAQ,CAACC,EADN;AAEP,eAAGD,QAAQ,CAACE,IAAT;AAFI,WAAD,CAAd;AAIC,SALL;AAMH,OAZD,MAYO;AACH;AACA;AACAb,QAAAA,cAAc,CAACQ,QAAD,CAAd;AACH;AACJ,KAlB0B,CAA3B;AAmBH,GAhC6B,CAkC9B;;;AACAM,EAAAA,oBAAoB,GAAG;AACnB,SAAKV,mBAAL;AACH;;AAEDW,EAAAA,MAAM,GAAI;AACN,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAGtB,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAGC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,WAAlB;AAA8B,MAAA,SAAS,EAAGE,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,EAAC,SAFT;AAGI,MAAA,MAAM,EAAE,MACJ,KAAKU,KAAL,CAAWU,WAAX,GACC,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,GAGC,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAFJ,CADJ;AAoBH;;AA5D6B,C,CA+DlC;AACA;;;AACA,MAAMC,eAAe,GAAGzB,wBAAwB,CAAC;AAC7CwB,EAAAA,WAAW,EAAEf;AADgC,CAAD,CAAhD,C,CAIA;AACA;AACA;AACA;;AACA,MAAMiB,kBAAkB,GAAGC,QAAQ,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,EAAAA,cAAc,EAAEoB,IAAI,IAAID,QAAQ,CAACnB,cAAc,CAACoB,IAAD,CAAf;AARI,CAAL,CAAnC;;AAWA,eAAe7B,OAAO,CAClB0B,eADkB,EACDC,kBADC,CAAP,CAEbhB,GAFa,CAAf","sourcesContent":["import React from 'react';\n// Import Switch and Route to enable routing\nimport { Switch, Route, Redirect } from 'react-router-dom';\n// Import connect to enable the app to access redux\nimport { connect } from 'react-redux';\n// Import createStructured selector to allow multiple selector calls\nimport { createStructuredSelector } from 'reselect';\n\nimport './App.css';\n\n// Import HomePage Component\nimport HomePage from './pages/homepage/homepage.component';\n// Import ShopPage Component\nimport ShopPage from './pages/shop/shop.component'\n// Import SignInAndSignUp Component\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component'\n// Import CheckoutPage component\nimport CheckoutPage from './pages/checkout/checkout.component';\n\n// Import Header Component\nimport Header from './components/header/header.component'\n// Import auth from firebase utiils\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils';\n// Import setCurrentUser action to enable us to set currentUser\nimport { setCurrentUser } from './redux/user/user.actions';\n// Import selectors to pass into mapStateToProps\nimport { selectCurrentUser } from './redux/user/user.selectors';\n\nclass App extends React.Component {\n    // We set the initial unsibscribeFromAuth value to null\n    // to enable us to close the session when we unmount\n    unsubscribeFromAuth = null;\n\n    componentDidMount() {\n        // Destructure setCurrentUser from our props\n        const {setCurrentUser} = this.props;\n        // The onAuthStateChanged is a method from our auth library\n        // that enables us to set the session state to the user details\n        // It takes an async function in which we set the\n        // createUserProfileDocument param to the user object, if the\n        // userAuth exists\n        this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n            if (userAuth) {\n                const userRef = await createUserProfileDocument(userAuth);\n                \n                // Here, we call the onSnapshot method to get a snapshot\n                // of the user's data and we set the currentUser value to\n                // those details (user's ID and rest of the snapshot data)\n                userRef.onSnapshot(snapShot => {\n                    setCurrentUser({\n                            id: snapShot.id,\n                            ...snapShot.data()\n                        });\n                    });\n            } else {\n                // If the user logs out, we set the currentUser value\n                // back to null\n                setCurrentUser(userAuth);\n            }\n        });\n    }\n\n    // We close the session when the component unmounts\n    componentWillUnmount() {\n        this.unsubscribeFromAuth();\n    }\n    \n    render () {\n        return (\n            <div>\n                <Header />\n                <Switch>\n                    <Route exact path='/' component={ HomePage } />\n                    <Route path='/shop' component={ ShopPage } />\n                    <Route exact path='/checkout' component={ CheckoutPage } />\n                    <Route\n                        exact\n                        path='/signin'\n                        render={() => \n                            this.props.currentUser ?\n                            (<Redirect to='/' />)\n                            :\n                            (<SignInAndSignUp />)\n                        }\n                    />\n                </Switch>\n            </div>\n        );\n    }\n}\n\n// FOR REDIRECTING THE USER TO HOME PAGE IF SIGNED IN\n// We want to get our redux user state\nconst mapStateToProps = createStructuredSelector({\n    currentUser: selectCurrentUser\n});\n\n// The mapDispatchToProps function takes the dispatch property\n// and returns an object where the prop name will be whatever\n// prop we want to pass in that dispatches the new action that\n// we want to pass, which in this instance is setCurrentUser\nconst mapDispatchToProps = dispatch => ({\n    // setCurrentUser is the prop, but it goes to a function\n    // that gets the user object and then calls dispatch\n    // dispatch lets redux know that whatever object it is\n    // being passed is an action object that it needs to\n    // pass to every reducer\n    // So here, we call the setCurrentUser action and pass\n    // in the user that will be used as the payload\n    setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(\n    mapStateToProps, mapDispatchToProps\n)(App);\n"]},"metadata":{},"sourceType":"module"}