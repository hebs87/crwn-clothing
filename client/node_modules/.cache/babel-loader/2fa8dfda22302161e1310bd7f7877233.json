{"ast":null,"code":"// Import connect to give us access to the selectors and state\nimport { connect } from 'react-redux'; // Import compose to allow us to curry our connect and components\n\nimport { compose } from 'redux'; // Import createStructuredSelector to allow mapStateToProps\n\nimport { createStructuredSelector } from 'reselect'; // Import relevant selectors that we need\n\nimport { selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors'; // Import WithSpinner HOC\n\nimport WithSpinner from '../../components/with-spinner/with-spinner.component'; // Import CollectionsPage component\n\nimport CollectionPage from './collection.component'; // The mapStateToProps sets our isLoading state\n// to the selectIsCollectionsLoaded selector\n// This allows us to set pass it into our WithSpinner\n// HOC component, to then make our spinner work\n// The prop needs to have the same name as the prop\n// that the HOC is expecting (isLoading in this case)\n// As we want to invert the value of the loading state,\n// we can actually pass in a function that passes in\n// the state to the selector - this memoizes the selector\n\nconst mapStateToProps = createStructuredSelector({\n  isLoading: state => !selectIsCollectionsLoaded(state)\n}); // We could write the below as\n// connect(mapStateToProps)(WithSpinner(CollectionsPage))\n// However, this can get confusing if we have more and\n// more HOCs that we are wrapping our components with\n// To avoid that, we can use compose to pass in the\n// relevant HOCs, and then we pass in the component\n// that we ultimately want to wrap - in this case, we\n// pass in connect and WithSpinner to the compose and\n// then we pass CollectionPage into the whole thing\n\nconst CollectionPageContainer = compose(connect(mapStateToProps), WithSpinner)(CollectionPage);\nexport default CollectionPageContainer;","map":{"version":3,"sources":["/workspace/crwn-clothing/client/src/pages/collection/collection.container.jsx"],"names":["connect","compose","createStructuredSelector","selectIsCollectionsLoaded","WithSpinner","CollectionPage","mapStateToProps","isLoading","state","CollectionPageContainer"],"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,OAAT,QAAwB,OAAxB,C,CACA;;AACA,SAASC,wBAAT,QAAyC,UAAzC,C,CACA;;AACA,SAASC,yBAAT,QAA0C,iCAA1C,C,CACA;;AACA,OAAOC,WAAP,MAAwB,sDAAxB,C,CACA;;AACA,OAAOC,cAAP,MAA2B,wBAA3B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAGJ,wBAAwB,CAAC;AAC7CK,EAAAA,SAAS,EAAEC,KAAK,IAAI,CAACL,yBAAyB,CAACK,KAAD;AADD,CAAD,CAAhD,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,uBAAuB,GAAGR,OAAO,CACnCD,OAAO,CAACM,eAAD,CAD4B,EAEnCF,WAFmC,CAAP,CAG9BC,cAH8B,CAAhC;AAKA,eAAeI,uBAAf","sourcesContent":["// Import connect to give us access to the selectors and state\nimport { connect } from 'react-redux';\n// Import compose to allow us to curry our connect and components\nimport { compose } from 'redux';\n// Import createStructuredSelector to allow mapStateToProps\nimport { createStructuredSelector } from 'reselect';\n// Import relevant selectors that we need\nimport { selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\n// Import WithSpinner HOC\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n// Import CollectionsPage component\nimport CollectionPage from './collection.component';\n\n// The mapStateToProps sets our isLoading state\n// to the selectIsCollectionsLoaded selector\n// This allows us to set pass it into our WithSpinner\n// HOC component, to then make our spinner work\n// The prop needs to have the same name as the prop\n// that the HOC is expecting (isLoading in this case)\n// As we want to invert the value of the loading state,\n// we can actually pass in a function that passes in\n// the state to the selector - this memoizes the selector\nconst mapStateToProps = createStructuredSelector({\n    isLoading: state => !selectIsCollectionsLoaded(state)\n});\n\n// We could write the below as\n// connect(mapStateToProps)(WithSpinner(CollectionsPage))\n// However, this can get confusing if we have more and\n// more HOCs that we are wrapping our components with\n// To avoid that, we can use compose to pass in the\n// relevant HOCs, and then we pass in the component\n// that we ultimately want to wrap - in this case, we\n// pass in connect and WithSpinner to the compose and\n// then we pass CollectionPage into the whole thing\nconst CollectionPageContainer = compose(\n    connect(mapStateToProps),\n    WithSpinner\n)(CollectionPage);\n\nexport default CollectionPageContainer;\n"]},"metadata":{},"sourceType":"module"}