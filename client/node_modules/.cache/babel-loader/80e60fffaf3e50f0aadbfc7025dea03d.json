{"ast":null,"code":"// Import the action type so we can set it as the case\nimport UserActionTypes from './user.types'; // -----------Google Sign In Actions-----------\n// This action is a function that just triggers\n// the actual sign in. It doesn't need a payload,\n// as we are only telling the saga that we need\n// to trigger our sign-in\n\nexport const googleSignInStart = () => ({\n  type: UserActionTypes.GOOGLE_SIGN_IN_START\n}); // This call will get the actual current user\n// at the end of it, which will be our payload value\n\nexport const googleSignInSuccess = user => ({\n  type: UserActionTypes.GOOGLE_SIGN_IN_SUCCESS,\n  payload: user\n}); // This call will get the error at the end of it,\n// which will be our payload value\n\nexport const googleSignInFailure = error => ({\n  type: UserActionTypes.GOOGLE_SIGN_IN_FAILURE,\n  payload: error\n}); // ------------Email Sign In Actions------------\n// This action is a function that just triggers\n// the actual sign in. However, the difference\n// between this and the Google one is that we\n// need to get the email and password so that\n// we can verify or add it to the database. To\n// do this, we get the emailAndPassword and set\n// it as the payload\n\nexport const emailSignInStart = emailAndPassword => ({\n  type: UserActionTypes.EMAIL_SIGN_IN_START,\n  payload: emailAndPassword\n}); // This call will get the actual current user\n// at the end of it, which will be our payload value\n\nexport const emailSignInSuccess = user => ({\n  type: UserActionTypes.EMAIL_SIGN_IN_SUCCESS,\n  payload: user\n}); // This call will get the error at the end of it,\n// which will be our payload value\n\nexport const emailSignInFailure = error => ({\n  type: UserActionTypes.EMAIL_SIGN_IN_FAILURE,\n  payload: error\n});","map":{"version":3,"sources":["/workspace/crwn-clothing/src/redux/user/user.actions.js"],"names":["UserActionTypes","googleSignInStart","type","GOOGLE_SIGN_IN_START","googleSignInSuccess","user","GOOGLE_SIGN_IN_SUCCESS","payload","googleSignInFailure","error","GOOGLE_SIGN_IN_FAILURE","emailSignInStart","emailAndPassword","EMAIL_SIGN_IN_START","emailSignInSuccess","EMAIL_SIGN_IN_SUCCESS","emailSignInFailure","EMAIL_SIGN_IN_FAILURE"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,cAA5B,C,CAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,OAAO;AACpCC,EAAAA,IAAI,EAAEF,eAAe,CAACG;AADc,CAAP,CAA1B,C,CAIP;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAGC,IAAI,KAAK;AACxCH,EAAAA,IAAI,EAAEF,eAAe,CAACM,sBADkB;AAExCC,EAAAA,OAAO,EAAEF;AAF+B,CAAL,CAAhC,C,CAKP;AACA;;AACA,OAAO,MAAMG,mBAAmB,GAAGC,KAAK,KAAK;AACzCP,EAAAA,IAAI,EAAEF,eAAe,CAACU,sBADmB;AAEzCH,EAAAA,OAAO,EAAEE;AAFgC,CAAL,CAAjC,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,gBAAgB,GAAGC,gBAAgB,KAAK;AACjDV,EAAAA,IAAI,EAAEF,eAAe,CAACa,mBAD2B;AAEjDN,EAAAA,OAAO,EAAEK;AAFwC,CAAL,CAAzC,C,CAKP;AACA;;AACA,OAAO,MAAME,kBAAkB,GAAGT,IAAI,KAAK;AACvCH,EAAAA,IAAI,EAAEF,eAAe,CAACe,qBADiB;AAEvCR,EAAAA,OAAO,EAAEF;AAF8B,CAAL,CAA/B,C,CAKP;AACA;;AACA,OAAO,MAAMW,kBAAkB,GAAGP,KAAK,KAAK;AACxCP,EAAAA,IAAI,EAAEF,eAAe,CAACiB,qBADkB;AAExCV,EAAAA,OAAO,EAAEE;AAF+B,CAAL,CAAhC","sourcesContent":["// Import the action type so we can set it as the case\nimport UserActionTypes from './user.types';\n\n// -----------Google Sign In Actions-----------\n// This action is a function that just triggers\n// the actual sign in. It doesn't need a payload,\n// as we are only telling the saga that we need\n// to trigger our sign-in\nexport const googleSignInStart = () => ({\n    type: UserActionTypes.GOOGLE_SIGN_IN_START\n});\n\n// This call will get the actual current user\n// at the end of it, which will be our payload value\nexport const googleSignInSuccess = user => ({\n    type: UserActionTypes.GOOGLE_SIGN_IN_SUCCESS,\n    payload: user\n});\n\n// This call will get the error at the end of it,\n// which will be our payload value\nexport const googleSignInFailure = error => ({\n    type: UserActionTypes.GOOGLE_SIGN_IN_FAILURE,\n    payload: error\n});\n\n// ------------Email Sign In Actions------------\n// This action is a function that just triggers\n// the actual sign in. However, the difference\n// between this and the Google one is that we\n// need to get the email and password so that\n// we can verify or add it to the database. To\n// do this, we get the emailAndPassword and set\n// it as the payload\nexport const emailSignInStart = emailAndPassword => ({\n    type: UserActionTypes.EMAIL_SIGN_IN_START,\n    payload: emailAndPassword\n});\n\n// This call will get the actual current user\n// at the end of it, which will be our payload value\nexport const emailSignInSuccess = user => ({\n    type: UserActionTypes.EMAIL_SIGN_IN_SUCCESS,\n    payload: user\n});\n\n// This call will get the error at the end of it,\n// which will be our payload value\nexport const emailSignInFailure = error => ({\n    type: UserActionTypes.EMAIL_SIGN_IN_FAILURE,\n    payload: error\n});\n"]},"metadata":{},"sourceType":"module"}