{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from './user.actions';\nexport function* signInWithGoogle() {\n  try {\n    // When we sign in, we get our userRef, but we only want the\n    // user object from it, so we destructure that first\n    // We don't use the auth.signInWithPopup(googleProvider)\n    // function directly from the firebase utils, because we want\n    // to access the object that gets returned from the success\n    // of our signInWithPopup\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider); // The userRef is now what we will get back when we call our\n    // createUserProfileDocument and our user. This is the same as\n    // const userRef = await createUserProfileDocument(userAuth);\n    // that was initially in the App.js file, only it is in the\n    // form of a yield, rather than an async await\n\n    const userRef = yield call(createUserProfileDocument, user); // We get our snapshop by calling .get() on the userRef\n\n    const userSnapshot = yield userRef.get(); // We now want to issue out our success action and pass in\n    // the snapshot id and spread in the rest of the data\n\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    // If we get an error, we want to yield the put of that\n    // into our failure action and pass in the error message\n    yield put(googleSignInFailure(error.message));\n  }\n}\n; // For signing in with email, we only want our email and password\n// from our payload, so we need to destructure that in our params\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n  } catch (error) {\n    // If we get an error, we want to yield the put of that\n    // into our failure action and pass in the error message\n    yield put(emailSignInFailure(error.message));\n  }\n}\n; // We build our onGoogleSignInStart generator function\n// which is declared using the function* syntax\n// The generator function uses the takeLatest method which\n// listens to every action of a specific type (first argument),\n// and also a second generator function (second argument) - this\n// is how we step through the yield code. It only invokes the\n// latest action, so if the signInWithGoogle Saga is run\n// multiple times, it will cancel all other previous ones\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n; // This will be our saga for the onEmailSignInStart, which will\n// be similar to the onGoogleSignInStart saga, except it will\n// be listening for the EMAIL_SIGN_IN_START action type and\n// it will trigger the signInWithEmail generator function instead\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n; // We create a userSagas that calls our onGoogleSignInStart\n// and onEmailSignInStart sagas, so that they can be passed\n// into the root saga\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n;","map":{"version":3,"sources":["/workspace/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","message","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SACIC,IADJ,EAEIC,cAFJ,EAGIC,yBAHJ,QAIO,+BAJP;AAMA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,kBAHJ,EAIIC,kBAJJ,QAKO,gBALP;AAOA,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACS,eAAL,CAAqBR,cAArB,CAAvB,CAPA,CAQA;AACA;AACA;AACA;AACA;;AACA,UAAMS,OAAO,GAAG,MAAMZ,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B,CAbA,CAcA;;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAfA,CAgBA;AACA;;AACA,UAAMhB,GAAG,CACLO,mBAAmB,CAAC;AAChBU,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADD;AAEhB,SAAGF,YAAY,CAACG,IAAb;AAFa,KAAD,CADd,CAAT;AAMH,GAxBD,CAwBE,OAAOC,KAAP,EAAc;AACZ;AACA;AACA,UAAMnB,GAAG,CAACQ,mBAAmB,CAACW,KAAK,CAACC,OAAP,CAApB,CAAT;AACH;AACJ;AAAA,C,CAED;AACA;;AACA,OAAO,UAAUC,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAV,CAA1B,EAA0D;AAC7D,MAAI;AAEA,UAAM;AAAEZ,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACqB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACH,GAHD,CAGE,OAAOL,KAAP,EAAc;AACZ;AACA;AACA,UAAMnB,GAAG,CAACU,kBAAkB,CAACS,KAAK,CAACC,OAAP,CAAnB,CAAT;AACH;AACJ;AAAA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,UAAUM,mBAAV,GAAgC;AACnC,QAAM3B,UAAU,CACZI,eAAe,CAACwB,oBADJ,EAEZhB,gBAFY,CAAhB;AAIH;AAAA,C,CAED;AACA;AACA;AACA;;AACA,OAAO,UAAUiB,kBAAV,GAA+B;AAClC,QAAM7B,UAAU,CACZI,eAAe,CAAC0B,mBADJ,EAEZR,eAFY,CAAhB;AAIH;AAAA,C,CAED;AACA;AACA;;AACA,OAAO,UAAUS,SAAV,GAAsB;AACzB,QAAM7B,GAAG,CAAC,CACNC,IAAI,CAACwB,mBAAD,CADE,EAENxB,IAAI,CAAC0B,kBAAD,CAFE,CAAD,CAAT;AAIH;AAAA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport {\n    auth,\n    googleProvider,\n    createUserProfileDocument\n} from '../../firebase/firebase.utils';\n\nimport {\n    googleSignInSuccess,\n    googleSignInFailure,\n    emailSignInSuccess,\n    emailSignInFailure\n} from './user.actions';\n\nexport function* signInWithGoogle() {\n    try {\n        // When we sign in, we get our userRef, but we only want the\n        // user object from it, so we destructure that first\n        // We don't use the auth.signInWithPopup(googleProvider)\n        // function directly from the firebase utils, because we want\n        // to access the object that gets returned from the success\n        // of our signInWithPopup\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        // The userRef is now what we will get back when we call our\n        // createUserProfileDocument and our user. This is the same as\n        // const userRef = await createUserProfileDocument(userAuth);\n        // that was initially in the App.js file, only it is in the\n        // form of a yield, rather than an async await\n        const userRef = yield call(createUserProfileDocument, user);\n        // We get our snapshop by calling .get() on the userRef\n        const userSnapshot = yield userRef.get();\n        // We now want to issue out our success action and pass in\n        // the snapshot id and spread in the rest of the data\n        yield put(\n            googleSignInSuccess({\n                id: userSnapshot.id,\n                ...userSnapshot.data()\n            })\n        );\n    } catch (error) {\n        // If we get an error, we want to yield the put of that\n        // into our failure action and pass in the error message\n        yield put(googleSignInFailure(error.message));\n    }\n};\n\n// For signing in with email, we only want our email and password\n// from our payload, so we need to destructure that in our params\nexport function* signInWithEmail({payload: { email, password }}) {\n    try {\n        \n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    } catch (error) {\n        // If we get an error, we want to yield the put of that\n        // into our failure action and pass in the error message\n        yield put(emailSignInFailure(error.message));\n    }\n};\n\n// We build our onGoogleSignInStart generator function\n// which is declared using the function* syntax\n// The generator function uses the takeLatest method which\n// listens to every action of a specific type (first argument),\n// and also a second generator function (second argument) - this\n// is how we step through the yield code. It only invokes the\n// latest action, so if the signInWithGoogle Saga is run\n// multiple times, it will cancel all other previous ones\nexport function* onGoogleSignInStart() {\n    yield takeLatest(\n        UserActionTypes.GOOGLE_SIGN_IN_START,\n        signInWithGoogle\n    );\n};\n\n// This will be our saga for the onEmailSignInStart, which will\n// be similar to the onGoogleSignInStart saga, except it will\n// be listening for the EMAIL_SIGN_IN_START action type and\n// it will trigger the signInWithEmail generator function instead\nexport function* onEmailSignInStart() {\n    yield takeLatest(\n        UserActionTypes.EMAIL_SIGN_IN_START,\n        signInWithEmail\n    );\n};\n\n// We create a userSagas that calls our onGoogleSignInStart\n// and onEmailSignInStart sagas, so that they can be passed\n// into the root saga\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart)\n    ]);\n};\n"]},"metadata":{},"sourceType":"module"}